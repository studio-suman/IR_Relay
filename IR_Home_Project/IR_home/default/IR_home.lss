
IR_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e30  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  00000e30  00000ea4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080019a  00000f6a  00000fde  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001cb  00000000  00000000  0000105e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a71  00000000  00000000  00001229  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000414  00000000  00000000  00001c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a4e  00000000  00000000  000020ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00002afc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000244  00000000  00000000  00002c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a2  00000000  00000000  00002e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003202  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	30 c2       	rjmp	.+1120   	; 0x464 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	14 c2       	rjmp	.+1064   	; 0x436 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e3       	ldi	r30, 0x30	; 48
  3a:	fe e0       	ldi	r31, 0x0E	; 14
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 39       	cpi	r26, 0x9A	; 154
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	aa e9       	ldi	r26, 0x9A	; 154
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 3b       	cpi	r26, 0xB6	; 182
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	e8 c6       	rjmp	.+3536   	; 0xe2c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__heap_end>

0000005e <main>:
#include "eeprom.h"

uint8_t app_1,app_2,app_3,app_4,cmd=0;

int main()
{
  5e:	84 b3       	in	r24, 0x14	; 20
  60:	8f 60       	ori	r24, 0x0F	; 15
  62:	84 bb       	out	0x14, r24	; 20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	01 97       	sbiw	r24, 0x01	; 1
  6a:	f1 f7       	brne	.-4      	; 0x68 <main+0xa>

	//Give Some Time for other hardware to start
	_delay_loop_2(0);

	
	LCDInit(LS_BLINK);//Initialize the LCD Subsystem
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	25 d1       	rcall	.+586    	; 0x2ba <LCDInit>
	
	LCDClear();
  70:	60 e0       	ldi	r22, 0x00	; 0
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	f5 d0       	rcall	.+490    	; 0x260 <LCDByte>
	
	InitRemote();//Initialize the Remote Subsystem
  76:	b9 d1       	rcall	.+882    	; 0x3ea <InitRemote>

	I have written the EEPROM routines using atmega8 datasheet. Refer EEPROM section 
	in datasheet for more information regarding reading and writing of operations
	in EEPROM.
	*/
	app_1 = EEPROM_read(0);    //Reading from internal EEPROM
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	bc d0       	rcall	.+376    	; 0x1f6 <EEPROM_read>
  7e:	80 93 9e 01 	sts	0x019E, r24
	app_2 = EEPROM_read(1);
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	b7 d0       	rcall	.+366    	; 0x1f6 <EEPROM_read>
  88:	80 93 9c 01 	sts	0x019C, r24
	app_3 = EEPROM_read(2);
  8c:	82 e0       	ldi	r24, 0x02	; 2
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	b2 d0       	rcall	.+356    	; 0x1f6 <EEPROM_read>
  92:	80 93 9b 01 	sts	0x019B, r24
	app_4 = EEPROM_read(3);
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	ad d0       	rcall	.+346    	; 0x1f6 <EEPROM_read>
  9c:	80 93 9d 01 	sts	0x019D, r24

	while(1)
	{
	switch(cmd)
  a0:	80 91 9a 01 	lds	r24, 0x019A
  a4:	84 31       	cpi	r24, 0x14	; 20
  a6:	09 f4       	brne	.+2      	; 0xaa <main+0x4c>
  a8:	40 c0       	rjmp	.+128    	; 0x12a <main+0xcc>
  aa:	85 31       	cpi	r24, 0x15	; 21
  ac:	30 f4       	brcc	.+12     	; 0xba <main+0x5c>
  ae:	8a 30       	cpi	r24, 0x0A	; 10
  b0:	89 f1       	breq	.+98     	; 0x114 <main+0xb6>
  b2:	8f 30       	cpi	r24, 0x0F	; 15
  b4:	09 f0       	breq	.+2      	; 0xb8 <main+0x5a>
  b6:	54 c0       	rjmp	.+168    	; 0x160 <main+0x102>
  b8:	13 c0       	rjmp	.+38     	; 0xe0 <main+0x82>
  ba:	84 34       	cpi	r24, 0x44	; 68
  bc:	21 f0       	breq	.+8      	; 0xc6 <main+0x68>
  be:	81 35       	cpi	r24, 0x51	; 81
  c0:	09 f0       	breq	.+2      	; 0xc4 <main+0x66>
  c2:	4e c0       	rjmp	.+156    	; 0x160 <main+0x102>
  c4:	1a c0       	rjmp	.+52     	; 0xfa <main+0x9c>
		{
		case RC_1:
			app_1=~app_1;   //toggling the state of appliance
  c6:	60 91 9e 01 	lds	r22, 0x019E
  ca:	60 95       	com	r22
  cc:	60 93 9e 01 	sts	0x019E, r22
			if(app_1==0)
  d0:	66 23       	and	r22, r22
  d2:	11 f4       	brne	.+4      	; 0xd8 <main+0x7a>
			PORTC|=(1<<PC0);    //Turn Off the appliance_1
  d4:	a8 9a       	sbi	0x15, 0	; 21
  d6:	01 c0       	rjmp	.+2      	; 0xda <main+0x7c>
			else
			PORTC&=(~(1<<PC0));		//Turn On the appliance_1
  d8:	a8 98       	cbi	0x15, 0	; 21
	
			EEPROM_write(0,app_1); //saving the state of appliance
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	3f c0       	rjmp	.+126    	; 0x15e <main+0x100>
			break;
		
		case RC_2:
			app_2=~app_2;   //toggling the state of appliance
  e0:	60 91 9c 01 	lds	r22, 0x019C
  e4:	60 95       	com	r22
  e6:	60 93 9c 01 	sts	0x019C, r22
			if(app_2==0)
  ea:	66 23       	and	r22, r22
  ec:	11 f4       	brne	.+4      	; 0xf2 <main+0x94>
			PORTC|=(1<<PC1);    //Turn Off the appliance_2
  ee:	a9 9a       	sbi	0x15, 1	; 21
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <main+0x96>
			else
			PORTC&=(~(1<<PC1));		//Turn On the appliance_2
  f2:	a9 98       	cbi	0x15, 1	; 21
			
			EEPROM_write(1,app_2); //saving the state of appliance
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	32 c0       	rjmp	.+100    	; 0x15e <main+0x100>
			break;
		
		case RC_3:
			app_3=~app_3;   //toggling the state of appliance
  fa:	60 91 9b 01 	lds	r22, 0x019B
  fe:	60 95       	com	r22
 100:	60 93 9b 01 	sts	0x019B, r22
			if(app_3==0)
 104:	66 23       	and	r22, r22
 106:	11 f4       	brne	.+4      	; 0x10c <main+0xae>
			PORTC|=(1<<PC2);    //Turn Off the appliance_3
 108:	aa 9a       	sbi	0x15, 2	; 21
 10a:	01 c0       	rjmp	.+2      	; 0x10e <main+0xb0>
			else
			PORTC&=(~(1<<PC2));		//Turn On the appliance_3
 10c:	aa 98       	cbi	0x15, 2	; 21
			
			EEPROM_write(2,app_3); //saving the state of appliance
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	25 c0       	rjmp	.+74     	; 0x15e <main+0x100>
			break;

		case RC_4:
			app_4=~app_4;   //toggling the state of appliance
 114:	60 91 9d 01 	lds	r22, 0x019D
 118:	60 95       	com	r22
 11a:	60 93 9d 01 	sts	0x019D, r22
			if(app_4==0)
 11e:	66 23       	and	r22, r22
 120:	11 f4       	brne	.+4      	; 0x126 <main+0xc8>
			PORTC|=(1<<PC3);    //Turn Off the appliance_4
 122:	ab 9a       	sbi	0x15, 3	; 21
 124:	1a c0       	rjmp	.+52     	; 0x15a <main+0xfc>
			else
			PORTC&=(~(1<<PC3));		//Turn On the appliance_4
 126:	ab 98       	cbi	0x15, 3	; 21
 128:	18 c0       	rjmp	.+48     	; 0x15a <main+0xfc>
			
			EEPROM_write(3,app_4); //saving the state of appliance
			break;

		case RC_POWER:  //turn off all the appliances
			app_1=0;
 12a:	10 92 9e 01 	sts	0x019E, r1
			app_2=0;
 12e:	10 92 9c 01 	sts	0x019C, r1
			app_3=0;
 132:	10 92 9b 01 	sts	0x019B, r1
			app_4=0;
 136:	10 92 9d 01 	sts	0x019D, r1
			EEPROM_write(0,app_1);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	52 d0       	rcall	.+164    	; 0x1e6 <EEPROM_write>
			EEPROM_write(1,app_2);
 142:	60 91 9c 01 	lds	r22, 0x019C
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	4d d0       	rcall	.+154    	; 0x1e6 <EEPROM_write>
			EEPROM_write(2,app_3);
 14c:	60 91 9b 01 	lds	r22, 0x019B
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	48 d0       	rcall	.+144    	; 0x1e6 <EEPROM_write>
			EEPROM_write(3,app_4);
 156:	60 91 9d 01 	lds	r22, 0x019D
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	43 d0       	rcall	.+134    	; 0x1e6 <EEPROM_write>
			break;
		}
			
			if(app_1==0)
 160:	80 91 9e 01 	lds	r24, 0x019E
 164:	88 23       	and	r24, r24
 166:	31 f4       	brne	.+12     	; 0x174 <main+0x116>
			{LCDWriteStringXY(1,0,"A1-OFF");}
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	36 d1       	rcall	.+620    	; 0x3da <LCDGotoXY>
 16e:	80 e6       	ldi	r24, 0x60	; 96
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	05 c0       	rjmp	.+10     	; 0x17e <main+0x120>
			else
			{LCDWriteStringXY(1,0,"A1-ON ");}
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	30 d1       	rcall	.+608    	; 0x3da <LCDGotoXY>
 17a:	87 e6       	ldi	r24, 0x67	; 103
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	c5 d0       	rcall	.+394    	; 0x30a <LCDWriteString>
			
			if(app_2==0)
 180:	80 91 9c 01 	lds	r24, 0x019C
 184:	88 23       	and	r24, r24
 186:	31 f4       	brne	.+12     	; 0x194 <main+0x136>
			{LCDWriteStringXY(9,0,"A2-OFF");}
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	89 e0       	ldi	r24, 0x09	; 9
 18c:	26 d1       	rcall	.+588    	; 0x3da <LCDGotoXY>
 18e:	8e e6       	ldi	r24, 0x6E	; 110
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	05 c0       	rjmp	.+10     	; 0x19e <main+0x140>
			else
			{LCDWriteStringXY(9,0,"A2-ON ");}
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	89 e0       	ldi	r24, 0x09	; 9
 198:	20 d1       	rcall	.+576    	; 0x3da <LCDGotoXY>
 19a:	85 e7       	ldi	r24, 0x75	; 117
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	b5 d0       	rcall	.+362    	; 0x30a <LCDWriteString>
						
			if(app_3==0)
 1a0:	80 91 9b 01 	lds	r24, 0x019B
 1a4:	88 23       	and	r24, r24
 1a6:	31 f4       	brne	.+12     	; 0x1b4 <main+0x156>
			{LCDWriteStringXY(1,1,"A3-OFF");}
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	16 d1       	rcall	.+556    	; 0x3da <LCDGotoXY>
 1ae:	8c e7       	ldi	r24, 0x7C	; 124
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <main+0x160>
			else
			{LCDWriteStringXY(1,1,"A3-ON ");}
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	10 d1       	rcall	.+544    	; 0x3da <LCDGotoXY>
 1ba:	83 e8       	ldi	r24, 0x83	; 131
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	a5 d0       	rcall	.+330    	; 0x30a <LCDWriteString>
			

		
			if(app_4==0)
 1c0:	80 91 9d 01 	lds	r24, 0x019D
 1c4:	88 23       	and	r24, r24
 1c6:	31 f4       	brne	.+12     	; 0x1d4 <main+0x176>
			{LCDWriteStringXY(9,1,"A4-OFF");}
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	89 e0       	ldi	r24, 0x09	; 9
 1cc:	06 d1       	rcall	.+524    	; 0x3da <LCDGotoXY>
 1ce:	8a e8       	ldi	r24, 0x8A	; 138
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	05 c0       	rjmp	.+10     	; 0x1de <main+0x180>
			else
			{LCDWriteStringXY(9,1,"A4-ON ");}
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	89 e0       	ldi	r24, 0x09	; 9
 1d8:	00 d1       	rcall	.+512    	; 0x3da <LCDGotoXY>
 1da:	81 e9       	ldi	r24, 0x91	; 145
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	95 d0       	rcall	.+298    	; 0x30a <LCDWriteString>
			
			uint8_t cmd;  //dont cut and paste on the top
			cmd=GetRemoteCmd(1);	
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	e4 d2       	rcall	.+1480   	; 0x7ac <GetRemoteCmd>
 1e4:	5d cf       	rjmp	.-326    	; 0xa0 <main+0x42>

000001e6 <EEPROM_write>:
#include <avr/io.h>
#include <util/delay.h>
#include "eeprom.h"

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
 1e6:	e1 99       	sbic	0x1c, 1	; 28
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <EEPROM_write>
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
;
/* Set up address and data registers */
EEAR = uiAddress;
 1ea:	9f bb       	out	0x1f, r25	; 31
 1ec:	8e bb       	out	0x1e, r24	; 30
EEDR = ucData;
 1ee:	6d bb       	out	0x1d, r22	; 29
/* Write logical one to EEMWE */
EECR |= (1<<EEMWE);
 1f0:	e2 9a       	sbi	0x1c, 2	; 28
/* Start eeprom write by setting EEWE */
EECR |= (1<<EEWE);
 1f2:	e1 9a       	sbi	0x1c, 1	; 28
}
 1f4:	08 95       	ret

000001f6 <EEPROM_read>:


unsigned char EEPROM_read(unsigned int uiAddress)
{
 1f6:	e1 99       	sbic	0x1c, 1	; 28
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <EEPROM_read>
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
;
/* Set up address register */
EEAR = uiAddress;
 1fa:	9f bb       	out	0x1f, r25	; 31
 1fc:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
 1fe:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
 200:	8d b3       	in	r24, 0x1d	; 29
}
 202:	08 95       	ret

00000204 <LCDBusyLoop>:

LCDBusyLoop();
}

void LCDBusyLoop()
{
 204:	81 b3       	in	r24, 0x11	; 17
 206:	87 78       	andi	r24, 0x87	; 135
 208:	81 bb       	out	0x11, r24	; 17

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));

	//change LCD mode
	SET_RW();		//Read mode
 20a:	c0 9a       	sbi	0x18, 0	; 24
	CLEAR_RS();		//Read status
 20c:	c2 98       	cbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	8a 95       	dec	r24
 212:	f1 f7       	brne	.-4      	; 0x210 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	32 e0       	ldi	r19, 0x02	; 2
 218:	97 9a       	sbi	0x12, 7	; 18
 21a:	82 2f       	mov	r24, r18
 21c:	8a 95       	dec	r24
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
 220:	80 b3       	in	r24, 0x10	; 16
 222:	86 95       	lsr	r24
 224:	86 95       	lsr	r24
 226:	86 95       	lsr	r24
		status=status<<4;
 228:	82 95       	swap	r24
 22a:	80 7f       	andi	r24, 0xF0	; 240
 22c:	92 2f       	mov	r25, r18
 22e:	9a 95       	dec	r25
 230:	f1 f7       	brne	.-4      	; 0x22e <LCDBusyLoop+0x2a>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 232:	97 98       	cbi	0x12, 7	; 18
 234:	93 2f       	mov	r25, r19
 236:	9a 95       	dec	r25
 238:	f1 f7       	brne	.-4      	; 0x236 <LCDBusyLoop+0x32>
		_delay_us(1);	//tEL

		SET_E();
 23a:	97 9a       	sbi	0x12, 7	; 18
 23c:	92 2f       	mov	r25, r18
 23e:	9a 95       	dec	r25
 240:	f1 f7       	brne	.-4      	; 0x23e <LCDBusyLoop+0x3a>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
 242:	90 b3       	in	r25, 0x10	; 16
 244:	92 2f       	mov	r25, r18
 246:	9a 95       	dec	r25
 248:	f1 f7       	brne	.-4      	; 0x246 <LCDBusyLoop+0x42>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 24a:	97 98       	cbi	0x12, 7	; 18
 24c:	93 2f       	mov	r25, r19
 24e:	9a 95       	dec	r25
 250:	f1 f7       	brne	.-4      	; 0x24e <LCDBusyLoop+0x4a>
		_delay_us(1);	//tEL
	}while(busy);
 252:	87 fd       	sbrc	r24, 7
 254:	e1 cf       	rjmp	.-62     	; 0x218 <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
 256:	c0 98       	cbi	0x18, 0	; 24
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 258:	81 b3       	in	r24, 0x11	; 17
 25a:	88 67       	ori	r24, 0x78	; 120
 25c:	81 bb       	out	0x11, r24	; 17

}
 25e:	08 95       	ret

00000260 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 260:	28 2f       	mov	r18, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 262:	66 23       	and	r22, r22
 264:	11 f4       	brne	.+4      	; 0x26a <LCDByte+0xa>
	CLEAR_RS();
 266:	c2 98       	cbi	0x18, 2	; 24
 268:	01 c0       	rjmp	.+2      	; 0x26c <LCDByte+0xc>
else
	SET_RS();
 26a:	c2 9a       	sbi	0x18, 2	; 24
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	8a 95       	dec	r24
 270:	f1 f7       	brne	.-4      	; 0x26e <LCDByte+0xe>

_delay_us(0.500);		//tAS

SET_E();
 272:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 274:	92 b3       	in	r25, 0x12	; 18
 276:	82 2f       	mov	r24, r18
 278:	82 95       	swap	r24
 27a:	8f 70       	andi	r24, 0x0F	; 15
 27c:	88 0f       	add	r24, r24
 27e:	88 0f       	add	r24, r24
 280:	88 0f       	add	r24, r24
 282:	97 78       	andi	r25, 0x87	; 135
 284:	89 2b       	or	r24, r25
LCD_DATA_PORT=temp;
 286:	82 bb       	out	0x12, r24	; 18
 288:	92 e0       	ldi	r25, 0x02	; 2
 28a:	89 2f       	mov	r24, r25
 28c:	8a 95       	dec	r24
 28e:	f1 f7       	brne	.-4      	; 0x28c <LCDByte+0x2c>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 290:	97 98       	cbi	0x12, 7	; 18
 292:	89 2f       	mov	r24, r25
 294:	8a 95       	dec	r24
 296:	f1 f7       	brne	.-4      	; 0x294 <LCDByte+0x34>

_delay_us(1);

//Send the lower nibble
SET_E();
 298:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 29a:	82 b3       	in	r24, 0x12	; 18
 29c:	2f 70       	andi	r18, 0x0F	; 15
 29e:	22 0f       	add	r18, r18
 2a0:	22 0f       	add	r18, r18
 2a2:	22 0f       	add	r18, r18
 2a4:	87 78       	andi	r24, 0x87	; 135
 2a6:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 2a8:	82 bb       	out	0x12, r24	; 18
 2aa:	89 2f       	mov	r24, r25
 2ac:	8a 95       	dec	r24
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <LCDByte+0x4c>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 2b0:	97 98       	cbi	0x12, 7	; 18
 2b2:	9a 95       	dec	r25
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCDByte+0x52>

_delay_us(1);			//tEL

LCDBusyLoop();
 2b6:	a6 df       	rcall	.-180    	; 0x204 <LCDBusyLoop>
}
 2b8:	08 95       	ret

000002ba <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 2ba:	1f 93       	push	r17
 2bc:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2be:	80 e6       	ldi	r24, 0x60	; 96
 2c0:	9a ee       	ldi	r25, 0xEA	; 234
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCDInit+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 2c6:	81 b3       	in	r24, 0x11	; 17
 2c8:	88 67       	ori	r24, 0x78	; 120
 2ca:	81 bb       	out	0x11, r24	; 17
	LCD_E_DDR|=(1<<LCD_E_POS);
 2cc:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 2ce:	ba 9a       	sbi	0x17, 2	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 2d0:	b8 9a       	sbi	0x17, 0	; 23

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 2d2:	82 b3       	in	r24, 0x12	; 18
 2d4:	87 78       	andi	r24, 0x87	; 135
 2d6:	82 bb       	out	0x12, r24	; 18
	CLEAR_E();
 2d8:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 2da:	c0 98       	cbi	0x18, 0	; 24
	CLEAR_RS();
 2dc:	c2 98       	cbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	8a 95       	dec	r24
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <LCDInit+0x26>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 2e4:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 2e6:	94 9a       	sbi	0x12, 4	; 18
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	98 2f       	mov	r25, r24
 2ec:	9a 95       	dec	r25
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCDInit+0x32>
	_delay_us(1);
	CLEAR_E();
 2f0:	97 98       	cbi	0x12, 7	; 18
 2f2:	8a 95       	dec	r24
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCDInit+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 2f6:	86 df       	rcall	.-244    	; 0x204 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	81 2f       	mov	r24, r17
 2fc:	8c 60       	ori	r24, 0x0C	; 12
 2fe:	b0 df       	rcall	.-160    	; 0x260 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	88 e2       	ldi	r24, 0x28	; 40
 304:	ad df       	rcall	.-166    	; 0x260 <LCDByte>
}
 306:	1f 91       	pop	r17
 308:	08 95       	ret

0000030a <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	ec 01       	movw	r28, r24
 310:	03 c0       	rjmp	.+6      	; 0x318 <LCDWriteString+0xe>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	a5 df       	rcall	.-182    	; 0x260 <LCDByte>
	msg++;
 316:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 318:	88 81       	ld	r24, Y
 31a:	88 23       	and	r24, r24
 31c:	d1 f7       	brne	.-12     	; 0x312 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 324:	ef 92       	push	r14
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	df 93       	push	r29
 32e:	cf 93       	push	r28
 330:	00 d0       	rcall	.+0      	; 0x332 <LCDWriteInt+0xe>
 332:	00 d0       	rcall	.+0      	; 0x334 <LCDWriteInt+0x10>
 334:	0f 92       	push	r0
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
 33a:	9c 01       	movw	r18, r24
 33c:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 33e:	fe 01       	movw	r30, r28
 340:	31 96       	adiw	r30, 0x01	; 1
 342:	85 e0       	ldi	r24, 0x05	; 5
 344:	df 01       	movw	r26, r30
 346:	1d 92       	st	X+, r1
 348:	8a 95       	dec	r24
 34a:	e9 f7       	brne	.-6      	; 0x346 <LCDWriteInt+0x22>
 34c:	fe 01       	movw	r30, r28
 34e:	35 96       	adiw	r30, 0x05	; 5
 350:	0b c0       	rjmp	.+22     	; 0x368 <LCDWriteInt+0x44>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 352:	c9 01       	movw	r24, r18
 354:	6a e0       	ldi	r22, 0x0A	; 10
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	0b d5       	rcall	.+2582   	; 0xd70 <__divmodhi4>
 35a:	80 83       	st	Z, r24
	val=val/10;
 35c:	c9 01       	movw	r24, r18
 35e:	6a e0       	ldi	r22, 0x0A	; 10
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	06 d5       	rcall	.+2572   	; 0xd70 <__divmodhi4>
 364:	9b 01       	movw	r18, r22
 366:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 368:	21 15       	cp	r18, r1
 36a:	31 05       	cpc	r19, r1
 36c:	91 f7       	brne	.-28     	; 0x352 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 36e:	bf ef       	ldi	r27, 0xFF	; 255
 370:	0f 3f       	cpi	r16, 0xFF	; 255
 372:	1b 07       	cpc	r17, r27
 374:	79 f4       	brne	.+30     	; 0x394 <LCDWriteInt+0x70>
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 37a:	ae 01       	movw	r20, r28
 37c:	4f 5f       	subi	r20, 0xFF	; 255
 37e:	5f 4f       	sbci	r21, 0xFF	; 255
 380:	02 c0       	rjmp	.+4      	; 0x386 <LCDWriteInt+0x62>
 382:	2f 5f       	subi	r18, 0xFF	; 255
 384:	3f 4f       	sbci	r19, 0xFF	; 255
 386:	fa 01       	movw	r30, r20
 388:	e2 0f       	add	r30, r18
 38a:	f3 1f       	adc	r31, r19
 38c:	80 81       	ld	r24, Z
 38e:	88 23       	and	r24, r24
 390:	c1 f3       	breq	.-16     	; 0x382 <LCDWriteInt+0x5e>
 392:	04 c0       	rjmp	.+8      	; 0x39c <LCDWriteInt+0x78>
	else
		j=5-field_length;
 394:	25 e0       	ldi	r18, 0x05	; 5
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	20 1b       	sub	r18, r16
 39a:	31 0b       	sbc	r19, r17
 39c:	7e 01       	movw	r14, r28
 39e:	08 94       	sec
 3a0:	e1 1c       	adc	r14, r1
 3a2:	f1 1c       	adc	r15, r1
 3a4:	e2 0e       	add	r14, r18
 3a6:	f3 1e       	adc	r15, r19
 3a8:	89 01       	movw	r16, r18
 3aa:	08 c0       	rjmp	.+16     	; 0x3bc <LCDWriteInt+0x98>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 3ac:	f7 01       	movw	r30, r14
 3ae:	81 91       	ld	r24, Z+
 3b0:	7f 01       	movw	r14, r30
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	80 5d       	subi	r24, 0xD0	; 208
 3b6:	54 df       	rcall	.-344    	; 0x260 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 3b8:	0f 5f       	subi	r16, 0xFF	; 255
 3ba:	1f 4f       	sbci	r17, 0xFF	; 255
 3bc:	05 30       	cpi	r16, 0x05	; 5
 3be:	11 05       	cpc	r17, r1
 3c0:	ac f3       	brlt	.-22     	; 0x3ac <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	cf 91       	pop	r28
 3ce:	df 91       	pop	r29
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	ff 90       	pop	r15
 3d6:	ef 90       	pop	r14
 3d8:	08 95       	ret

000003da <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 3da:	88 32       	cpi	r24, 0x28	; 40
 3dc:	28 f4       	brcc	.+10     	; 0x3e8 <LCDGotoXY+0xe>
 if(x<40)
 {
  if(y) x|=0b01000000;
 3de:	61 11       	cpse	r22, r1
 3e0:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	80 68       	ori	r24, 0x80	; 128
 3e6:	3c df       	rcall	.-392    	; 0x260 <LCDByte>
 3e8:	08 95       	ret

000003ea <InitRemote>:
/**********************************************************************************************/
/*				F U N C T I O N S   S T A R T S												  */
/**********************************************************************************************/

void InitRemote()
{
 3ea:	10 92 a3 01 	sts	0x01A3, r1
 3ee:	10 92 a4 01 	sts	0x01A4, r1
 3f2:	10 92 a5 01 	sts	0x01A5, r1
 3f6:	10 92 a6 01 	sts	0x01A6, r1

	
	char i;
	for(i=0;i<4;i++) IrData[i]=0;

	stop=0;
 3fa:	10 92 b5 01 	sts	0x01B5, r1
 3fe:	10 92 b4 01 	sts	0x01B4, r1
	State=IR_VALIDATE_LEAD_HIGH;
 402:	10 92 a7 01 	sts	0x01A7, r1
	Edge=0;
 406:	10 92 a1 01 	sts	0x01A1, r1
	Repeat=0;
 40a:	10 92 9f 01 	sts	0x019F, r1

	//Setup Timer1
	//------------
	TCCR1B|=((1<<CS10)|(1<<WGM12));	//Prescaler : Fcpu   Mode : CTC
 40e:	8e b5       	in	r24, 0x2e	; 46
 410:	89 60       	ori	r24, 0x09	; 9
 412:	8e bd       	out	0x2e, r24	; 46

	TIMSK|=(1<<OCIE1A);	//Enable Output Compare Interrupt
 414:	89 b7       	in	r24, 0x39	; 57
 416:	80 61       	ori	r24, 0x10	; 16
 418:	89 bf       	out	0x39, r24	; 57

	OCR1A=TIMER_COMP_VAL;			//Set Compare Value 
 41a:	80 e5       	ldi	r24, 0x50	; 80
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	9b bd       	out	0x2b, r25	; 43
 420:	8a bd       	out	0x2a, r24	; 42


	//Set Up INT0
	//------------
	MCUCR|=(1<<ISC01);	//INT ON Falling Edge
 422:	85 b7       	in	r24, 0x35	; 53
 424:	82 60       	ori	r24, 0x02	; 2
 426:	85 bf       	out	0x35, r24	; 53

	GICR|=(1<<INT0);	//Enable INT0
 428:	8b b7       	in	r24, 0x3b	; 59
 42a:	80 64       	ori	r24, 0x40	; 64
 42c:	8b bf       	out	0x3b, r24	; 59

	//Enable Interrupts
	//-------------------

	SREG|=(1<<7);
 42e:	8f b7       	in	r24, 0x3f	; 63
 430:	80 68       	ori	r24, 0x80	; 128
 432:	8f bf       	out	0x3f, r24	; 63
}	
 434:	08 95       	ret

00000436 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	11 24       	eor	r1, r1
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
	Time++;
 444:	80 91 b1 01 	lds	r24, 0x01B1
 448:	90 91 b2 01 	lds	r25, 0x01B2
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	90 93 b2 01 	sts	0x01B2, r25
 452:	80 93 b1 01 	sts	0x01B1, r24
}
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <__vector_1>:
ISR(INT0_vect)
{
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	df 92       	push	r13
 470:	ef 92       	push	r14
 472:	ff 92       	push	r15
 474:	0f 93       	push	r16
 476:	1f 93       	push	r17
 478:	2f 93       	push	r18
 47a:	3f 93       	push	r19
 47c:	4f 93       	push	r20
 47e:	5f 93       	push	r21
 480:	6f 93       	push	r22
 482:	7f 93       	push	r23
 484:	8f 93       	push	r24
 486:	9f 93       	push	r25
 488:	af 93       	push	r26
 48a:	bf 93       	push	r27
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	ef 93       	push	r30
 492:	ff 93       	push	r31

	GICR&=(~(1<<INT0));	//Disable INT1
 494:	8b b7       	in	r24, 0x3b	; 59
 496:	8f 7b       	andi	r24, 0xBF	; 191
 498:	8b bf       	out	0x3b, r24	; 59
	sei();
 49a:	78 94       	sei
	
	if(stop) return;
 49c:	80 91 b4 01 	lds	r24, 0x01B4
 4a0:	90 91 b5 01 	lds	r25, 0x01B5
 4a4:	89 2b       	or	r24, r25
 4a6:	09 f0       	breq	.+2      	; 0x4aa <__vector_1+0x46>
 4a8:	56 c1       	rjmp	.+684    	; 0x756 <__vector_1+0x2f2>
	unsigned int TempTime=Time;
 4aa:	c0 91 b1 01 	lds	r28, 0x01B1
 4ae:	d0 91 b2 01 	lds	r29, 0x01B2
	Time=0;
 4b2:	10 92 b2 01 	sts	0x01B2, r1
 4b6:	10 92 b1 01 	sts	0x01B1, r1
	TCNT0=0;
 4ba:	12 be       	out	0x32, r1	; 50
	switch(State)
 4bc:	d0 90 a7 01 	lds	r13, 0x01A7
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	d8 16       	cp	r13, r24
 4c4:	59 f1       	breq	.+86     	; 0x51c <__vector_1+0xb8>
 4c6:	d8 16       	cp	r13, r24
 4c8:	48 f0       	brcs	.+18     	; 0x4dc <__vector_1+0x78>
 4ca:	83 e0       	ldi	r24, 0x03	; 3
 4cc:	d8 16       	cp	r13, r24
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <__vector_1+0x6e>
 4d0:	93 c0       	rjmp	.+294    	; 0x5f8 <__vector_1+0x194>
 4d2:	84 e0       	ldi	r24, 0x04	; 4
 4d4:	d8 16       	cp	r13, r24
 4d6:	09 f0       	breq	.+2      	; 0x4da <__vector_1+0x76>
 4d8:	3b c1       	rjmp	.+630    	; 0x750 <__vector_1+0x2ec>
 4da:	e0 c0       	rjmp	.+448    	; 0x69c <__vector_1+0x238>
	{
	case IR_VALIDATE_LEAD_HIGH:
	{
			if(Edge)
 4dc:	80 91 a1 01 	lds	r24, 0x01A1
 4e0:	88 23       	and	r24, r24
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <__vector_1+0x82>
 4e4:	d4 c0       	rjmp	.+424    	; 0x68e <__vector_1+0x22a>
			{
				//Rising
				if((TempTime>(900-(900*TOL))) && (TempTime<(900+(900*TOL))))
 4e6:	be 01       	movw	r22, r28
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	d7 d1       	rcall	.+942    	; 0x89c <__floatunsisf>
 4ee:	7b 01       	movw	r14, r22
 4f0:	8c 01       	movw	r16, r24
 4f2:	20 e0       	ldi	r18, 0x00	; 0
 4f4:	30 e8       	ldi	r19, 0x80	; 128
 4f6:	4a e4       	ldi	r20, 0x4A	; 74
 4f8:	54 e4       	ldi	r21, 0x44	; 68
 4fa:	7a d1       	rcall	.+756    	; 0x7f0 <__gtsf2>
 4fc:	18 16       	cp	r1, r24
 4fe:	0c f0       	brlt	.+2      	; 0x502 <__vector_1+0x9e>
 500:	15 c1       	rjmp	.+554    	; 0x72c <__vector_1+0x2c8>
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	30 e8       	ldi	r19, 0x80	; 128
 506:	47 e7       	ldi	r20, 0x77	; 119
 508:	54 e4       	ldi	r21, 0x44	; 68
 50a:	c8 01       	movw	r24, r16
 50c:	b7 01       	movw	r22, r14
 50e:	9b d1       	rcall	.+822    	; 0x846 <__ltsf2>
 510:	87 ff       	sbrs	r24, 7
 512:	0c c1       	rjmp	.+536    	; 0x72c <__vector_1+0x2c8>
				{

					//Lead High Correct
					State=IR_VALIDATE_LEAD_LOW;
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	80 93 a7 01 	sts	0x01A7, r24
 51a:	12 c1       	rjmp	.+548    	; 0x740 <__vector_1+0x2dc>
			}
		break;
	}
	case IR_VALIDATE_LEAD_LOW:
	{
		if((TempTime>(450-(450*TOL))) && (TempTime<(450+(450*TOL))))
 51c:	be 01       	movw	r22, r28
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	bc d1       	rcall	.+888    	; 0x89c <__floatunsisf>
 524:	7b 01       	movw	r14, r22
 526:	8c 01       	movw	r16, r24
 528:	20 e0       	ldi	r18, 0x00	; 0
 52a:	30 e8       	ldi	r19, 0x80	; 128
 52c:	4a ec       	ldi	r20, 0xCA	; 202
 52e:	53 e4       	ldi	r21, 0x43	; 67
 530:	5f d1       	rcall	.+702    	; 0x7f0 <__gtsf2>
 532:	18 16       	cp	r1, r24
 534:	b4 f4       	brge	.+44     	; 0x562 <__vector_1+0xfe>
 536:	20 e0       	ldi	r18, 0x00	; 0
 538:	30 e8       	ldi	r19, 0x80	; 128
 53a:	47 ef       	ldi	r20, 0xF7	; 247
 53c:	53 e4       	ldi	r21, 0x43	; 67
 53e:	c8 01       	movw	r24, r16
 540:	b7 01       	movw	r22, r14
 542:	81 d1       	rcall	.+770    	; 0x846 <__ltsf2>
 544:	88 23       	and	r24, r24
 546:	6c f4       	brge	.+26     	; 0x562 <__vector_1+0xfe>
		{
		//Got a valid leader
		State=IR_RECEIVE_BITS;
 548:	83 e0       	ldi	r24, 0x03	; 3
 54a:	80 93 a7 01 	sts	0x01A7, r24
		BitNo=0;
 54e:	10 92 a2 01 	sts	0x01A2, r1
		ByteNo=0;
 552:	10 92 a0 01 	sts	0x01A0, r1
		MCUCR|=((1<<ISC01)|(1<<ISC00));	//Set INT on Rising Edge
 556:	85 b7       	in	r24, 0x35	; 53
 558:	83 60       	ori	r24, 0x03	; 3
 55a:	85 bf       	out	0x35, r24	; 53
		Edge=1;
 55c:	d0 92 a1 01 	sts	0x01A1, r13
 560:	f7 c0       	rjmp	.+494    	; 0x750 <__vector_1+0x2ec>

		
		}
		else if((TempTime>200) && (TempTime<245))
 562:	c9 5c       	subi	r28, 0xC9	; 201
 564:	d0 40       	sbci	r29, 0x00	; 0
 566:	ac 97       	sbiw	r28, 0x2c	; 44
 568:	08 f0       	brcs	.+2      	; 0x56c <__vector_1+0x108>
 56a:	e0 c0       	rjmp	.+448    	; 0x72c <__vector_1+0x2c8>
		{
			if(Repeat)
 56c:	80 91 9f 01 	lds	r24, 0x019F
 570:	88 23       	and	r24, r24
 572:	a1 f1       	breq	.+104    	; 0x5dc <__vector_1+0x178>
			{
			//Got a repeat pulse
			if((QEnd==(QMAX-1) && QFront==0)||((QEnd+1)==QFront))
 574:	80 91 99 00 	lds	r24, 0x0099
 578:	87 30       	cpi	r24, 0x07	; 7
 57a:	21 f4       	brne	.+8      	; 0x584 <__vector_1+0x120>
 57c:	80 91 98 00 	lds	r24, 0x0098
 580:	88 23       	and	r24, r24
 582:	51 f0       	breq	.+20     	; 0x598 <__vector_1+0x134>
 584:	80 91 99 00 	lds	r24, 0x0099
 588:	20 91 98 00 	lds	r18, 0x0098
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	82 17       	cp	r24, r18
 594:	93 07       	cpc	r25, r19
 596:	59 f4       	brne	.+22     	; 0x5ae <__vector_1+0x14a>
						{
							QFront++;
 598:	80 91 98 00 	lds	r24, 0x0098
 59c:	8f 5f       	subi	r24, 0xFF	; 255
 59e:	80 93 98 00 	sts	0x0098, r24
							if(QFront==(QMAX)) 
 5a2:	80 91 98 00 	lds	r24, 0x0098
 5a6:	88 30       	cpi	r24, 0x08	; 8
 5a8:	11 f4       	brne	.+4      	; 0x5ae <__vector_1+0x14a>
								QFront=0;
 5aa:	10 92 98 00 	sts	0x0098, r1
						}

						if(QEnd==(QMAX-1))
 5ae:	80 91 99 00 	lds	r24, 0x0099
 5b2:	87 30       	cpi	r24, 0x07	; 7
 5b4:	19 f4       	brne	.+6      	; 0x5bc <__vector_1+0x158>
							QEnd=0;
 5b6:	10 92 99 00 	sts	0x0099, r1
 5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <__vector_1+0x162>
						else
							QEnd++;
 5bc:	80 91 99 00 	lds	r24, 0x0099
 5c0:	8f 5f       	subi	r24, 0xFF	; 255
 5c2:	80 93 99 00 	sts	0x0099, r24

						IrCmdQ[QEnd]=PrevCmd;
 5c6:	e0 91 99 00 	lds	r30, 0x0099
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 91 a8 01 	lds	r24, 0x01A8
 5d0:	e7 55       	subi	r30, 0x57	; 87
 5d2:	fe 4f       	sbci	r31, 0xFE	; 254
 5d4:	80 83       	st	Z, r24

					if(QFront==-1) QFront=0;
 5d6:	80 91 98 00 	lds	r24, 0x0098
 5da:	a8 c0       	rjmp	.+336    	; 0x72c <__vector_1+0x2c8>
			}
			else
			{
				RCount++;
 5dc:	80 91 b3 01 	lds	r24, 0x01B3
 5e0:	8f 5f       	subi	r24, 0xFF	; 255
 5e2:	80 93 b3 01 	sts	0x01B3, r24
				if(RCount==4) Repeat=1;
 5e6:	80 91 b3 01 	lds	r24, 0x01B3
 5ea:	84 30       	cpi	r24, 0x04	; 4
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <__vector_1+0x18c>
 5ee:	9e c0       	rjmp	.+316    	; 0x72c <__vector_1+0x2c8>
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	80 93 9f 01 	sts	0x019F, r24
 5f6:	9a c0       	rjmp	.+308    	; 0x72c <__vector_1+0x2c8>
		}
	break;
	}
	case IR_RECEIVE_BITS:
	{
		if(Edge)
 5f8:	80 91 a1 01 	lds	r24, 0x01A1
 5fc:	88 23       	and	r24, r24
 5fe:	29 f0       	breq	.+10     	; 0x60a <__vector_1+0x1a6>
		{
			//Rising
			if((TempTime>50) && (TempTime<69))
 600:	e3 97       	sbiw	r28, 0x33	; 51
 602:	62 97       	sbiw	r28, 0x12	; 18
 604:	08 f0       	brcs	.+2      	; 0x608 <__vector_1+0x1a4>
 606:	92 c0       	rjmp	.+292    	; 0x72c <__vector_1+0x2c8>
 608:	9b c0       	rjmp	.+310    	; 0x740 <__vector_1+0x2dc>
			}
		}
		else
		{
			//Falling
			if((TempTime>41) && (TempTime<58))
 60a:	ce 01       	movw	r24, r28
 60c:	8a 97       	sbiw	r24, 0x2a	; 42
 60e:	40 97       	sbiw	r24, 0x10	; 16
 610:	40 f1       	brcs	.+80     	; 0x662 <__vector_1+0x1fe>

					}
				}
				MCUCR|=((1<<ISC01)|(1<<ISC00));	//Set INT on Rising Edge 
				Edge=1;
			}else if((TempTime>(169-(169*TOL))) && (TempTime<(169+(169*TOL))))
 612:	be 01       	movw	r22, r28
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	41 d1       	rcall	.+642    	; 0x89c <__floatunsisf>
 61a:	7b 01       	movw	r14, r22
 61c:	8c 01       	movw	r16, r24
 61e:	2a e9       	ldi	r18, 0x9A	; 154
 620:	39 e1       	ldi	r19, 0x19	; 25
 622:	48 e1       	ldi	r20, 0x18	; 24
 624:	53 e4       	ldi	r21, 0x43	; 67
 626:	e4 d0       	rcall	.+456    	; 0x7f0 <__gtsf2>
 628:	18 16       	cp	r1, r24
 62a:	0c f0       	brlt	.+2      	; 0x62e <__vector_1+0x1ca>
 62c:	7f c0       	rjmp	.+254    	; 0x72c <__vector_1+0x2c8>
 62e:	26 e6       	ldi	r18, 0x66	; 102
 630:	36 ee       	ldi	r19, 0xE6	; 230
 632:	49 e3       	ldi	r20, 0x39	; 57
 634:	53 e4       	ldi	r21, 0x43	; 67
 636:	c8 01       	movw	r24, r16
 638:	b7 01       	movw	r22, r14
 63a:	05 d1       	rcall	.+522    	; 0x846 <__ltsf2>
 63c:	87 ff       	sbrs	r24, 7
 63e:	76 c0       	rjmp	.+236    	; 0x72c <__vector_1+0x2c8>
			{
				//We Have got a '1' here
				IrData[ByteNo]|=(1<<BitNo);
 640:	e0 91 a0 01 	lds	r30, 0x01A0
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	ed 55       	subi	r30, 0x5D	; 93
 648:	fe 4f       	sbci	r31, 0xFE	; 254
 64a:	20 81       	ld	r18, Z
 64c:	30 91 a2 01 	lds	r19, 0x01A2
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <__vector_1+0x1f6>
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	3a 95       	dec	r19
 65c:	e2 f7       	brpl	.-8      	; 0x656 <__vector_1+0x1f2>
 65e:	28 2b       	or	r18, r24
 660:	20 83       	st	Z, r18
				BitNo++;
 662:	80 91 a2 01 	lds	r24, 0x01A2
 666:	8f 5f       	subi	r24, 0xFF	; 255
 668:	80 93 a2 01 	sts	0x01A2, r24
				if(BitNo==8)
 66c:	80 91 a2 01 	lds	r24, 0x01A2
 670:	88 30       	cpi	r24, 0x08	; 8
 672:	69 f4       	brne	.+26     	; 0x68e <__vector_1+0x22a>
				{
					BitNo=0;
 674:	10 92 a2 01 	sts	0x01A2, r1
					ByteNo++;
 678:	80 91 a0 01 	lds	r24, 0x01A0
 67c:	8f 5f       	subi	r24, 0xFF	; 255
 67e:	80 93 a0 01 	sts	0x01A0, r24
					if(ByteNo==4)
 682:	80 91 a0 01 	lds	r24, 0x01A0
 686:	84 30       	cpi	r24, 0x04	; 4
 688:	11 f4       	brne	.+4      	; 0x68e <__vector_1+0x22a>
					{
						
						State=IR_WAIT_STOP_BIT;
 68a:	80 93 a7 01 	sts	0x01A7, r24
					
					}
				}
				MCUCR|=((1<<ISC01)|(1<<ISC00));	//Set INT on Rising Edge 
 68e:	85 b7       	in	r24, 0x35	; 53
 690:	83 60       	ori	r24, 0x03	; 3
 692:	85 bf       	out	0x35, r24	; 53
				Edge=1;
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	80 93 a1 01 	sts	0x01A1, r24
 69a:	5a c0       	rjmp	.+180    	; 0x750 <__vector_1+0x2ec>
		}
	break;
	}
	case IR_WAIT_STOP_BIT:
	{
		if(Edge)
 69c:	80 91 a1 01 	lds	r24, 0x01A1
 6a0:	88 23       	and	r24, r24
 6a2:	09 f4       	brne	.+2      	; 0x6a6 <__vector_1+0x242>
 6a4:	55 c0       	rjmp	.+170    	; 0x750 <__vector_1+0x2ec>
		{
			//Check for integrity
			if(IrData[2]==((unsigned char)~IrData[3]))
 6a6:	90 91 a5 01 	lds	r25, 0x01A5
 6aa:	80 91 a6 01 	lds	r24, 0x01A6
 6ae:	80 95       	com	r24
 6b0:	98 17       	cp	r25, r24
 6b2:	09 f0       	breq	.+2      	; 0x6b6 <__vector_1+0x252>
 6b4:	4d c0       	rjmp	.+154    	; 0x750 <__vector_1+0x2ec>
			{ 
				//Now We Have Got a packet
				//Add its Cmd to Queue
				
					//Step1:Check of Q full
					if((QEnd==(QMAX-1) && QFront==0)||((QEnd+1)==QFront))
 6b6:	80 91 99 00 	lds	r24, 0x0099
 6ba:	87 30       	cpi	r24, 0x07	; 7
 6bc:	21 f4       	brne	.+8      	; 0x6c6 <__vector_1+0x262>
 6be:	80 91 98 00 	lds	r24, 0x0098
 6c2:	88 23       	and	r24, r24
 6c4:	51 f0       	breq	.+20     	; 0x6da <__vector_1+0x276>
 6c6:	80 91 99 00 	lds	r24, 0x0099
 6ca:	20 91 98 00 	lds	r18, 0x0098
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	01 96       	adiw	r24, 0x01	; 1
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	82 17       	cp	r24, r18
 6d6:	93 07       	cpc	r25, r19
 6d8:	59 f4       	brne	.+22     	; 0x6f0 <__vector_1+0x28c>
					{
						QFront++;
 6da:	80 91 98 00 	lds	r24, 0x0098
 6de:	8f 5f       	subi	r24, 0xFF	; 255
 6e0:	80 93 98 00 	sts	0x0098, r24
						if(QFront==(QMAX)) 
 6e4:	80 91 98 00 	lds	r24, 0x0098
 6e8:	88 30       	cpi	r24, 0x08	; 8
 6ea:	11 f4       	brne	.+4      	; 0x6f0 <__vector_1+0x28c>
							QFront=0;
 6ec:	10 92 98 00 	sts	0x0098, r1
					}

					if(QEnd==(QMAX-1))
 6f0:	80 91 99 00 	lds	r24, 0x0099
 6f4:	87 30       	cpi	r24, 0x07	; 7
 6f6:	19 f4       	brne	.+6      	; 0x6fe <__vector_1+0x29a>
						QEnd=0;
 6f8:	10 92 99 00 	sts	0x0099, r1
 6fc:	05 c0       	rjmp	.+10     	; 0x708 <__vector_1+0x2a4>
					else
						QEnd++;
 6fe:	80 91 99 00 	lds	r24, 0x0099
 702:	8f 5f       	subi	r24, 0xFF	; 255
 704:	80 93 99 00 	sts	0x0099, r24

					IrCmdQ[QEnd]=IrData[2];
 708:	e0 91 99 00 	lds	r30, 0x0099
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 91 a5 01 	lds	r24, 0x01A5
 712:	e7 55       	subi	r30, 0x57	; 87
 714:	fe 4f       	sbci	r31, 0xFE	; 254
 716:	80 83       	st	Z, r24
					PrevCmd=IrData[2];
 718:	80 91 a5 01 	lds	r24, 0x01A5
 71c:	80 93 a8 01 	sts	0x01A8, r24

					if(QFront==-1) QFront=0;
 720:	80 91 98 00 	lds	r24, 0x0098
				//Prevent repeating immediatly
				Repeat=0;//It will be enabled after 4 repeat pulses
 724:	10 92 9f 01 	sts	0x019F, r1
				RCount=0;
 728:	10 92 b3 01 	sts	0x01B3, r1
}

void ResetIR()
{
	char i;
	for(i=0;i<4;i++) IrData[i]=0;
 72c:	10 92 a3 01 	sts	0x01A3, r1
 730:	10 92 a4 01 	sts	0x01A4, r1
 734:	10 92 a5 01 	sts	0x01A5, r1
 738:	10 92 a6 01 	sts	0x01A6, r1
	State=IR_VALIDATE_LEAD_HIGH;
 73c:	10 92 a7 01 	sts	0x01A7, r1
	//INT ON FALLING EDGE
	MCUCR&=(~((1<<ISC01)|(1<<ISC00)));
 740:	85 b7       	in	r24, 0x35	; 53
 742:	8c 7f       	andi	r24, 0xFC	; 252
 744:	85 bf       	out	0x35, r24	; 53
	MCUCR|=(1<<ISC01);
 746:	85 b7       	in	r24, 0x35	; 53
 748:	82 60       	ori	r24, 0x02	; 2
 74a:	85 bf       	out	0x35, r24	; 53
	Edge=0;
 74c:	10 92 a1 01 	sts	0x01A1, r1
			
		}
	}
	break;
	}
	GICR|=(1<<INT0);	//Enable INT1
 750:	8b b7       	in	r24, 0x3b	; 59
 752:	80 64       	ori	r24, 0x40	; 64
 754:	8b bf       	out	0x3b, r24	; 59
}
 756:	ff 91       	pop	r31
 758:	ef 91       	pop	r30
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	bf 91       	pop	r27
 760:	af 91       	pop	r26
 762:	9f 91       	pop	r25
 764:	8f 91       	pop	r24
 766:	7f 91       	pop	r23
 768:	6f 91       	pop	r22
 76a:	5f 91       	pop	r21
 76c:	4f 91       	pop	r20
 76e:	3f 91       	pop	r19
 770:	2f 91       	pop	r18
 772:	1f 91       	pop	r17
 774:	0f 91       	pop	r16
 776:	ff 90       	pop	r15
 778:	ef 90       	pop	r14
 77a:	df 90       	pop	r13
 77c:	0f 90       	pop	r0
 77e:	0f be       	out	0x3f, r0	; 63
 780:	0f 90       	pop	r0
 782:	1f 90       	pop	r1
 784:	18 95       	reti

00000786 <ResetIR>:

void ResetIR()
{
 786:	10 92 a3 01 	sts	0x01A3, r1
 78a:	10 92 a4 01 	sts	0x01A4, r1
 78e:	10 92 a5 01 	sts	0x01A5, r1
 792:	10 92 a6 01 	sts	0x01A6, r1
	char i;
	for(i=0;i<4;i++) IrData[i]=0;
	State=IR_VALIDATE_LEAD_HIGH;
 796:	10 92 a7 01 	sts	0x01A7, r1
	//INT ON FALLING EDGE
	MCUCR&=(~((1<<ISC01)|(1<<ISC00)));
 79a:	85 b7       	in	r24, 0x35	; 53
 79c:	8c 7f       	andi	r24, 0xFC	; 252
 79e:	85 bf       	out	0x35, r24	; 53
	MCUCR|=(1<<ISC01);
 7a0:	85 b7       	in	r24, 0x35	; 53
 7a2:	82 60       	ori	r24, 0x02	; 2
 7a4:	85 bf       	out	0x35, r24	; 53
	Edge=0;
 7a6:	10 92 a1 01 	sts	0x01A1, r1
}
 7aa:	08 95       	ret

000007ac <GetRemoteCmd>:


unsigned char GetRemoteCmd(char wait)
{
 7ac:	80 91 98 00 	lds	r24, 0x0098
	if(wait)
		while(QFront==-1);
	else
		if(QFront==-1) return (RC_NONE);

	cmd=IrCmdQ[QFront];
 7b0:	e0 91 98 00 	lds	r30, 0x0098
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	e7 55       	subi	r30, 0x57	; 87
 7b8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ba:	e0 81       	ld	r30, Z

	if(QFront==QEnd) 
 7bc:	90 91 98 00 	lds	r25, 0x0098
 7c0:	80 91 99 00 	lds	r24, 0x0099
 7c4:	98 17       	cp	r25, r24
 7c6:	31 f4       	brne	.+12     	; 0x7d4 <GetRemoteCmd+0x28>
		QFront=QEnd=-1;
 7c8:	8f ef       	ldi	r24, 0xFF	; 255
 7ca:	80 93 99 00 	sts	0x0099, r24
 7ce:	80 91 99 00 	lds	r24, 0x0099
 7d2:	0a c0       	rjmp	.+20     	; 0x7e8 <GetRemoteCmd+0x3c>
	else
	{
		if(QFront==(QMAX-1))
 7d4:	80 91 98 00 	lds	r24, 0x0098
 7d8:	87 30       	cpi	r24, 0x07	; 7
 7da:	19 f4       	brne	.+6      	; 0x7e2 <GetRemoteCmd+0x36>
			QFront=0;
 7dc:	10 92 98 00 	sts	0x0098, r1
 7e0:	05 c0       	rjmp	.+10     	; 0x7ec <GetRemoteCmd+0x40>
		else
			QFront++;
 7e2:	80 91 98 00 	lds	r24, 0x0098
 7e6:	8f 5f       	subi	r24, 0xFF	; 255
 7e8:	80 93 98 00 	sts	0x0098, r24
	}

	return cmd;
}
 7ec:	8e 2f       	mov	r24, r30
 7ee:	08 95       	ret

000007f0 <__gtsf2>:
 7f0:	a8 e1       	ldi	r26, 0x18	; 24
 7f2:	b0 e0       	ldi	r27, 0x00	; 0
 7f4:	ed ef       	ldi	r30, 0xFD	; 253
 7f6:	f3 e0       	ldi	r31, 0x03	; 3
 7f8:	ee c2       	rjmp	.+1500   	; 0xdd6 <__prologue_saves__+0x18>
 7fa:	69 83       	std	Y+1, r22	; 0x01
 7fc:	7a 83       	std	Y+2, r23	; 0x02
 7fe:	8b 83       	std	Y+3, r24	; 0x03
 800:	9c 83       	std	Y+4, r25	; 0x04
 802:	2d 83       	std	Y+5, r18	; 0x05
 804:	3e 83       	std	Y+6, r19	; 0x06
 806:	4f 83       	std	Y+7, r20	; 0x07
 808:	58 87       	std	Y+8, r21	; 0x08
 80a:	89 e0       	ldi	r24, 0x09	; 9
 80c:	e8 2e       	mov	r14, r24
 80e:	f1 2c       	mov	r15, r1
 810:	ec 0e       	add	r14, r28
 812:	fd 1e       	adc	r15, r29
 814:	b7 01       	movw	r22, r14
 816:	ce 01       	movw	r24, r28
 818:	01 96       	adiw	r24, 0x01	; 1
 81a:	d9 d1       	rcall	.+946    	; 0xbce <__unpack_f>
 81c:	8e 01       	movw	r16, r28
 81e:	0f 5e       	subi	r16, 0xEF	; 239
 820:	1f 4f       	sbci	r17, 0xFF	; 255
 822:	b8 01       	movw	r22, r16
 824:	ce 01       	movw	r24, r28
 826:	05 96       	adiw	r24, 0x05	; 5
 828:	d2 d1       	rcall	.+932    	; 0xbce <__unpack_f>
 82a:	89 85       	ldd	r24, Y+9	; 0x09
 82c:	82 30       	cpi	r24, 0x02	; 2
 82e:	38 f0       	brcs	.+14     	; 0x83e <__gtsf2+0x4e>
 830:	89 89       	ldd	r24, Y+17	; 0x11
 832:	82 30       	cpi	r24, 0x02	; 2
 834:	20 f0       	brcs	.+8      	; 0x83e <__gtsf2+0x4e>
 836:	b8 01       	movw	r22, r16
 838:	c7 01       	movw	r24, r14
 83a:	41 d2       	rcall	.+1154   	; 0xcbe <__fpcmp_parts_f>
 83c:	01 c0       	rjmp	.+2      	; 0x840 <__gtsf2+0x50>
 83e:	8f ef       	ldi	r24, 0xFF	; 255
 840:	68 96       	adiw	r28, 0x18	; 24
 842:	e6 e0       	ldi	r30, 0x06	; 6
 844:	e4 c2       	rjmp	.+1480   	; 0xe0e <__epilogue_restores__+0x18>

00000846 <__ltsf2>:
 846:	a8 e1       	ldi	r26, 0x18	; 24
 848:	b0 e0       	ldi	r27, 0x00	; 0
 84a:	e8 e2       	ldi	r30, 0x28	; 40
 84c:	f4 e0       	ldi	r31, 0x04	; 4
 84e:	c3 c2       	rjmp	.+1414   	; 0xdd6 <__prologue_saves__+0x18>
 850:	69 83       	std	Y+1, r22	; 0x01
 852:	7a 83       	std	Y+2, r23	; 0x02
 854:	8b 83       	std	Y+3, r24	; 0x03
 856:	9c 83       	std	Y+4, r25	; 0x04
 858:	2d 83       	std	Y+5, r18	; 0x05
 85a:	3e 83       	std	Y+6, r19	; 0x06
 85c:	4f 83       	std	Y+7, r20	; 0x07
 85e:	58 87       	std	Y+8, r21	; 0x08
 860:	89 e0       	ldi	r24, 0x09	; 9
 862:	e8 2e       	mov	r14, r24
 864:	f1 2c       	mov	r15, r1
 866:	ec 0e       	add	r14, r28
 868:	fd 1e       	adc	r15, r29
 86a:	b7 01       	movw	r22, r14
 86c:	ce 01       	movw	r24, r28
 86e:	01 96       	adiw	r24, 0x01	; 1
 870:	ae d1       	rcall	.+860    	; 0xbce <__unpack_f>
 872:	8e 01       	movw	r16, r28
 874:	0f 5e       	subi	r16, 0xEF	; 239
 876:	1f 4f       	sbci	r17, 0xFF	; 255
 878:	b8 01       	movw	r22, r16
 87a:	ce 01       	movw	r24, r28
 87c:	05 96       	adiw	r24, 0x05	; 5
 87e:	a7 d1       	rcall	.+846    	; 0xbce <__unpack_f>
 880:	89 85       	ldd	r24, Y+9	; 0x09
 882:	82 30       	cpi	r24, 0x02	; 2
 884:	38 f0       	brcs	.+14     	; 0x894 <__ltsf2+0x4e>
 886:	89 89       	ldd	r24, Y+17	; 0x11
 888:	82 30       	cpi	r24, 0x02	; 2
 88a:	20 f0       	brcs	.+8      	; 0x894 <__ltsf2+0x4e>
 88c:	b8 01       	movw	r22, r16
 88e:	c7 01       	movw	r24, r14
 890:	16 d2       	rcall	.+1068   	; 0xcbe <__fpcmp_parts_f>
 892:	01 c0       	rjmp	.+2      	; 0x896 <__ltsf2+0x50>
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	68 96       	adiw	r28, 0x18	; 24
 898:	e6 e0       	ldi	r30, 0x06	; 6
 89a:	b9 c2       	rjmp	.+1394   	; 0xe0e <__epilogue_restores__+0x18>

0000089c <__floatunsisf>:
 89c:	a8 e0       	ldi	r26, 0x08	; 8
 89e:	b0 e0       	ldi	r27, 0x00	; 0
 8a0:	e3 e5       	ldi	r30, 0x53	; 83
 8a2:	f4 e0       	ldi	r31, 0x04	; 4
 8a4:	96 c2       	rjmp	.+1324   	; 0xdd2 <__prologue_saves__+0x14>
 8a6:	7b 01       	movw	r14, r22
 8a8:	8c 01       	movw	r16, r24
 8aa:	61 15       	cp	r22, r1
 8ac:	71 05       	cpc	r23, r1
 8ae:	81 05       	cpc	r24, r1
 8b0:	91 05       	cpc	r25, r1
 8b2:	19 f4       	brne	.+6      	; 0x8ba <__floatunsisf+0x1e>
 8b4:	82 e0       	ldi	r24, 0x02	; 2
 8b6:	89 83       	std	Y+1, r24	; 0x01
 8b8:	5f c0       	rjmp	.+190    	; 0x978 <__floatunsisf+0xdc>
 8ba:	83 e0       	ldi	r24, 0x03	; 3
 8bc:	89 83       	std	Y+1, r24	; 0x01
 8be:	8e e1       	ldi	r24, 0x1E	; 30
 8c0:	c8 2e       	mov	r12, r24
 8c2:	d1 2c       	mov	r13, r1
 8c4:	dc 82       	std	Y+4, r13	; 0x04
 8c6:	cb 82       	std	Y+3, r12	; 0x03
 8c8:	ed 82       	std	Y+5, r14	; 0x05
 8ca:	fe 82       	std	Y+6, r15	; 0x06
 8cc:	0f 83       	std	Y+7, r16	; 0x07
 8ce:	18 87       	std	Y+8, r17	; 0x08
 8d0:	c8 01       	movw	r24, r16
 8d2:	b7 01       	movw	r22, r14
 8d4:	58 d0       	rcall	.+176    	; 0x986 <__clzsi2>
 8d6:	bc 01       	movw	r22, r24
 8d8:	61 50       	subi	r22, 0x01	; 1
 8da:	70 40       	sbci	r23, 0x00	; 0
 8dc:	77 ff       	sbrs	r23, 7
 8de:	39 c0       	rjmp	.+114    	; 0x952 <__floatunsisf+0xb6>
 8e0:	ee 27       	eor	r30, r30
 8e2:	ff 27       	eor	r31, r31
 8e4:	e6 1b       	sub	r30, r22
 8e6:	f7 0b       	sbc	r31, r23
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	40 e0       	ldi	r20, 0x00	; 0
 8ee:	50 e0       	ldi	r21, 0x00	; 0
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	a0 e0       	ldi	r26, 0x00	; 0
 8f6:	b0 e0       	ldi	r27, 0x00	; 0
 8f8:	0e 2e       	mov	r0, r30
 8fa:	04 c0       	rjmp	.+8      	; 0x904 <__floatunsisf+0x68>
 8fc:	88 0f       	add	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	aa 1f       	adc	r26, r26
 902:	bb 1f       	adc	r27, r27
 904:	0a 94       	dec	r0
 906:	d2 f7       	brpl	.-12     	; 0x8fc <__floatunsisf+0x60>
 908:	01 97       	sbiw	r24, 0x01	; 1
 90a:	a1 09       	sbc	r26, r1
 90c:	b1 09       	sbc	r27, r1
 90e:	8e 21       	and	r24, r14
 910:	9f 21       	and	r25, r15
 912:	a0 23       	and	r26, r16
 914:	b1 23       	and	r27, r17
 916:	00 97       	sbiw	r24, 0x00	; 0
 918:	a1 05       	cpc	r26, r1
 91a:	b1 05       	cpc	r27, r1
 91c:	21 f0       	breq	.+8      	; 0x926 <__floatunsisf+0x8a>
 91e:	21 e0       	ldi	r18, 0x01	; 1
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	40 e0       	ldi	r20, 0x00	; 0
 924:	50 e0       	ldi	r21, 0x00	; 0
 926:	04 c0       	rjmp	.+8      	; 0x930 <__floatunsisf+0x94>
 928:	16 95       	lsr	r17
 92a:	07 95       	ror	r16
 92c:	f7 94       	ror	r15
 92e:	e7 94       	ror	r14
 930:	ea 95       	dec	r30
 932:	d2 f7       	brpl	.-12     	; 0x928 <__floatunsisf+0x8c>
 934:	2e 29       	or	r18, r14
 936:	3f 29       	or	r19, r15
 938:	40 2b       	or	r20, r16
 93a:	51 2b       	or	r21, r17
 93c:	2d 83       	std	Y+5, r18	; 0x05
 93e:	3e 83       	std	Y+6, r19	; 0x06
 940:	4f 83       	std	Y+7, r20	; 0x07
 942:	58 87       	std	Y+8, r21	; 0x08
 944:	8e e1       	ldi	r24, 0x1E	; 30
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	86 1b       	sub	r24, r22
 94a:	97 0b       	sbc	r25, r23
 94c:	9c 83       	std	Y+4, r25	; 0x04
 94e:	8b 83       	std	Y+3, r24	; 0x03
 950:	13 c0       	rjmp	.+38     	; 0x978 <__floatunsisf+0xdc>
 952:	61 15       	cp	r22, r1
 954:	71 05       	cpc	r23, r1
 956:	81 f0       	breq	.+32     	; 0x978 <__floatunsisf+0xdc>
 958:	06 2e       	mov	r0, r22
 95a:	04 c0       	rjmp	.+8      	; 0x964 <__floatunsisf+0xc8>
 95c:	ee 0c       	add	r14, r14
 95e:	ff 1c       	adc	r15, r15
 960:	00 1f       	adc	r16, r16
 962:	11 1f       	adc	r17, r17
 964:	0a 94       	dec	r0
 966:	d2 f7       	brpl	.-12     	; 0x95c <__floatunsisf+0xc0>
 968:	ed 82       	std	Y+5, r14	; 0x05
 96a:	fe 82       	std	Y+6, r15	; 0x06
 96c:	0f 83       	std	Y+7, r16	; 0x07
 96e:	18 87       	std	Y+8, r17	; 0x08
 970:	c6 1a       	sub	r12, r22
 972:	d7 0a       	sbc	r13, r23
 974:	dc 82       	std	Y+4, r13	; 0x04
 976:	cb 82       	std	Y+3, r12	; 0x03
 978:	1a 82       	std	Y+2, r1	; 0x02
 97a:	ce 01       	movw	r24, r28
 97c:	01 96       	adiw	r24, 0x01	; 1
 97e:	52 d0       	rcall	.+164    	; 0xa24 <__pack_f>
 980:	28 96       	adiw	r28, 0x08	; 8
 982:	e8 e0       	ldi	r30, 0x08	; 8
 984:	42 c2       	rjmp	.+1156   	; 0xe0a <__epilogue_restores__+0x14>

00000986 <__clzsi2>:
 986:	ef 92       	push	r14
 988:	ff 92       	push	r15
 98a:	0f 93       	push	r16
 98c:	1f 93       	push	r17
 98e:	7b 01       	movw	r14, r22
 990:	8c 01       	movw	r16, r24
 992:	80 e0       	ldi	r24, 0x00	; 0
 994:	e8 16       	cp	r14, r24
 996:	80 e0       	ldi	r24, 0x00	; 0
 998:	f8 06       	cpc	r15, r24
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	08 07       	cpc	r16, r24
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	18 07       	cpc	r17, r24
 9a2:	88 f4       	brcc	.+34     	; 0x9c6 <__clzsi2+0x40>
 9a4:	8f ef       	ldi	r24, 0xFF	; 255
 9a6:	e8 16       	cp	r14, r24
 9a8:	f1 04       	cpc	r15, r1
 9aa:	01 05       	cpc	r16, r1
 9ac:	11 05       	cpc	r17, r1
 9ae:	31 f0       	breq	.+12     	; 0x9bc <__clzsi2+0x36>
 9b0:	28 f0       	brcs	.+10     	; 0x9bc <__clzsi2+0x36>
 9b2:	88 e0       	ldi	r24, 0x08	; 8
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	a0 e0       	ldi	r26, 0x00	; 0
 9b8:	b0 e0       	ldi	r27, 0x00	; 0
 9ba:	17 c0       	rjmp	.+46     	; 0x9ea <__clzsi2+0x64>
 9bc:	80 e0       	ldi	r24, 0x00	; 0
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	a0 e0       	ldi	r26, 0x00	; 0
 9c2:	b0 e0       	ldi	r27, 0x00	; 0
 9c4:	12 c0       	rjmp	.+36     	; 0x9ea <__clzsi2+0x64>
 9c6:	80 e0       	ldi	r24, 0x00	; 0
 9c8:	e8 16       	cp	r14, r24
 9ca:	80 e0       	ldi	r24, 0x00	; 0
 9cc:	f8 06       	cpc	r15, r24
 9ce:	80 e0       	ldi	r24, 0x00	; 0
 9d0:	08 07       	cpc	r16, r24
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	18 07       	cpc	r17, r24
 9d6:	28 f0       	brcs	.+10     	; 0x9e2 <__clzsi2+0x5c>
 9d8:	88 e1       	ldi	r24, 0x18	; 24
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	a0 e0       	ldi	r26, 0x00	; 0
 9de:	b0 e0       	ldi	r27, 0x00	; 0
 9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__clzsi2+0x64>
 9e2:	80 e1       	ldi	r24, 0x10	; 16
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	a0 e0       	ldi	r26, 0x00	; 0
 9e8:	b0 e0       	ldi	r27, 0x00	; 0
 9ea:	20 e2       	ldi	r18, 0x20	; 32
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	40 e0       	ldi	r20, 0x00	; 0
 9f0:	50 e0       	ldi	r21, 0x00	; 0
 9f2:	28 1b       	sub	r18, r24
 9f4:	39 0b       	sbc	r19, r25
 9f6:	4a 0b       	sbc	r20, r26
 9f8:	5b 0b       	sbc	r21, r27
 9fa:	04 c0       	rjmp	.+8      	; 0xa04 <__clzsi2+0x7e>
 9fc:	16 95       	lsr	r17
 9fe:	07 95       	ror	r16
 a00:	f7 94       	ror	r15
 a02:	e7 94       	ror	r14
 a04:	8a 95       	dec	r24
 a06:	d2 f7       	brpl	.-12     	; 0x9fc <__clzsi2+0x76>
 a08:	f7 01       	movw	r30, r14
 a0a:	e6 56       	subi	r30, 0x66	; 102
 a0c:	ff 4f       	sbci	r31, 0xFF	; 255
 a0e:	80 81       	ld	r24, Z
 a10:	28 1b       	sub	r18, r24
 a12:	31 09       	sbc	r19, r1
 a14:	41 09       	sbc	r20, r1
 a16:	51 09       	sbc	r21, r1
 a18:	c9 01       	movw	r24, r18
 a1a:	1f 91       	pop	r17
 a1c:	0f 91       	pop	r16
 a1e:	ff 90       	pop	r15
 a20:	ef 90       	pop	r14
 a22:	08 95       	ret

00000a24 <__pack_f>:
 a24:	df 92       	push	r13
 a26:	ef 92       	push	r14
 a28:	ff 92       	push	r15
 a2a:	0f 93       	push	r16
 a2c:	1f 93       	push	r17
 a2e:	fc 01       	movw	r30, r24
 a30:	e4 80       	ldd	r14, Z+4	; 0x04
 a32:	f5 80       	ldd	r15, Z+5	; 0x05
 a34:	06 81       	ldd	r16, Z+6	; 0x06
 a36:	17 81       	ldd	r17, Z+7	; 0x07
 a38:	d1 80       	ldd	r13, Z+1	; 0x01
 a3a:	80 81       	ld	r24, Z
 a3c:	82 30       	cpi	r24, 0x02	; 2
 a3e:	48 f4       	brcc	.+18     	; 0xa52 <__pack_f+0x2e>
 a40:	80 e0       	ldi	r24, 0x00	; 0
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	a0 e1       	ldi	r26, 0x10	; 16
 a46:	b0 e0       	ldi	r27, 0x00	; 0
 a48:	e8 2a       	or	r14, r24
 a4a:	f9 2a       	or	r15, r25
 a4c:	0a 2b       	or	r16, r26
 a4e:	1b 2b       	or	r17, r27
 a50:	a5 c0       	rjmp	.+330    	; 0xb9c <__pack_f+0x178>
 a52:	84 30       	cpi	r24, 0x04	; 4
 a54:	09 f4       	brne	.+2      	; 0xa58 <__pack_f+0x34>
 a56:	9f c0       	rjmp	.+318    	; 0xb96 <__pack_f+0x172>
 a58:	82 30       	cpi	r24, 0x02	; 2
 a5a:	21 f4       	brne	.+8      	; 0xa64 <__pack_f+0x40>
 a5c:	ee 24       	eor	r14, r14
 a5e:	ff 24       	eor	r15, r15
 a60:	87 01       	movw	r16, r14
 a62:	05 c0       	rjmp	.+10     	; 0xa6e <__pack_f+0x4a>
 a64:	e1 14       	cp	r14, r1
 a66:	f1 04       	cpc	r15, r1
 a68:	01 05       	cpc	r16, r1
 a6a:	11 05       	cpc	r17, r1
 a6c:	19 f4       	brne	.+6      	; 0xa74 <__pack_f+0x50>
 a6e:	e0 e0       	ldi	r30, 0x00	; 0
 a70:	f0 e0       	ldi	r31, 0x00	; 0
 a72:	96 c0       	rjmp	.+300    	; 0xba0 <__pack_f+0x17c>
 a74:	62 81       	ldd	r22, Z+2	; 0x02
 a76:	73 81       	ldd	r23, Z+3	; 0x03
 a78:	9f ef       	ldi	r25, 0xFF	; 255
 a7a:	62 38       	cpi	r22, 0x82	; 130
 a7c:	79 07       	cpc	r23, r25
 a7e:	0c f0       	brlt	.+2      	; 0xa82 <__pack_f+0x5e>
 a80:	5b c0       	rjmp	.+182    	; 0xb38 <__pack_f+0x114>
 a82:	22 e8       	ldi	r18, 0x82	; 130
 a84:	3f ef       	ldi	r19, 0xFF	; 255
 a86:	26 1b       	sub	r18, r22
 a88:	37 0b       	sbc	r19, r23
 a8a:	2a 31       	cpi	r18, 0x1A	; 26
 a8c:	31 05       	cpc	r19, r1
 a8e:	2c f0       	brlt	.+10     	; 0xa9a <__pack_f+0x76>
 a90:	20 e0       	ldi	r18, 0x00	; 0
 a92:	30 e0       	ldi	r19, 0x00	; 0
 a94:	40 e0       	ldi	r20, 0x00	; 0
 a96:	50 e0       	ldi	r21, 0x00	; 0
 a98:	2a c0       	rjmp	.+84     	; 0xaee <__pack_f+0xca>
 a9a:	b8 01       	movw	r22, r16
 a9c:	a7 01       	movw	r20, r14
 a9e:	02 2e       	mov	r0, r18
 aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__pack_f+0x86>
 aa2:	76 95       	lsr	r23
 aa4:	67 95       	ror	r22
 aa6:	57 95       	ror	r21
 aa8:	47 95       	ror	r20
 aaa:	0a 94       	dec	r0
 aac:	d2 f7       	brpl	.-12     	; 0xaa2 <__pack_f+0x7e>
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	a0 e0       	ldi	r26, 0x00	; 0
 ab4:	b0 e0       	ldi	r27, 0x00	; 0
 ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__pack_f+0x9c>
 ab8:	88 0f       	add	r24, r24
 aba:	99 1f       	adc	r25, r25
 abc:	aa 1f       	adc	r26, r26
 abe:	bb 1f       	adc	r27, r27
 ac0:	2a 95       	dec	r18
 ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__pack_f+0x94>
 ac4:	01 97       	sbiw	r24, 0x01	; 1
 ac6:	a1 09       	sbc	r26, r1
 ac8:	b1 09       	sbc	r27, r1
 aca:	8e 21       	and	r24, r14
 acc:	9f 21       	and	r25, r15
 ace:	a0 23       	and	r26, r16
 ad0:	b1 23       	and	r27, r17
 ad2:	00 97       	sbiw	r24, 0x00	; 0
 ad4:	a1 05       	cpc	r26, r1
 ad6:	b1 05       	cpc	r27, r1
 ad8:	21 f0       	breq	.+8      	; 0xae2 <__pack_f+0xbe>
 ada:	81 e0       	ldi	r24, 0x01	; 1
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	a0 e0       	ldi	r26, 0x00	; 0
 ae0:	b0 e0       	ldi	r27, 0x00	; 0
 ae2:	9a 01       	movw	r18, r20
 ae4:	ab 01       	movw	r20, r22
 ae6:	28 2b       	or	r18, r24
 ae8:	39 2b       	or	r19, r25
 aea:	4a 2b       	or	r20, r26
 aec:	5b 2b       	or	r21, r27
 aee:	da 01       	movw	r26, r20
 af0:	c9 01       	movw	r24, r18
 af2:	8f 77       	andi	r24, 0x7F	; 127
 af4:	90 70       	andi	r25, 0x00	; 0
 af6:	a0 70       	andi	r26, 0x00	; 0
 af8:	b0 70       	andi	r27, 0x00	; 0
 afa:	80 34       	cpi	r24, 0x40	; 64
 afc:	91 05       	cpc	r25, r1
 afe:	a1 05       	cpc	r26, r1
 b00:	b1 05       	cpc	r27, r1
 b02:	39 f4       	brne	.+14     	; 0xb12 <__pack_f+0xee>
 b04:	27 ff       	sbrs	r18, 7
 b06:	09 c0       	rjmp	.+18     	; 0xb1a <__pack_f+0xf6>
 b08:	20 5c       	subi	r18, 0xC0	; 192
 b0a:	3f 4f       	sbci	r19, 0xFF	; 255
 b0c:	4f 4f       	sbci	r20, 0xFF	; 255
 b0e:	5f 4f       	sbci	r21, 0xFF	; 255
 b10:	04 c0       	rjmp	.+8      	; 0xb1a <__pack_f+0xf6>
 b12:	21 5c       	subi	r18, 0xC1	; 193
 b14:	3f 4f       	sbci	r19, 0xFF	; 255
 b16:	4f 4f       	sbci	r20, 0xFF	; 255
 b18:	5f 4f       	sbci	r21, 0xFF	; 255
 b1a:	e0 e0       	ldi	r30, 0x00	; 0
 b1c:	f0 e0       	ldi	r31, 0x00	; 0
 b1e:	20 30       	cpi	r18, 0x00	; 0
 b20:	a0 e0       	ldi	r26, 0x00	; 0
 b22:	3a 07       	cpc	r19, r26
 b24:	a0 e0       	ldi	r26, 0x00	; 0
 b26:	4a 07       	cpc	r20, r26
 b28:	a0 e4       	ldi	r26, 0x40	; 64
 b2a:	5a 07       	cpc	r21, r26
 b2c:	10 f0       	brcs	.+4      	; 0xb32 <__pack_f+0x10e>
 b2e:	e1 e0       	ldi	r30, 0x01	; 1
 b30:	f0 e0       	ldi	r31, 0x00	; 0
 b32:	79 01       	movw	r14, r18
 b34:	8a 01       	movw	r16, r20
 b36:	27 c0       	rjmp	.+78     	; 0xb86 <__pack_f+0x162>
 b38:	60 38       	cpi	r22, 0x80	; 128
 b3a:	71 05       	cpc	r23, r1
 b3c:	64 f5       	brge	.+88     	; 0xb96 <__pack_f+0x172>
 b3e:	fb 01       	movw	r30, r22
 b40:	e1 58       	subi	r30, 0x81	; 129
 b42:	ff 4f       	sbci	r31, 0xFF	; 255
 b44:	d8 01       	movw	r26, r16
 b46:	c7 01       	movw	r24, r14
 b48:	8f 77       	andi	r24, 0x7F	; 127
 b4a:	90 70       	andi	r25, 0x00	; 0
 b4c:	a0 70       	andi	r26, 0x00	; 0
 b4e:	b0 70       	andi	r27, 0x00	; 0
 b50:	80 34       	cpi	r24, 0x40	; 64
 b52:	91 05       	cpc	r25, r1
 b54:	a1 05       	cpc	r26, r1
 b56:	b1 05       	cpc	r27, r1
 b58:	39 f4       	brne	.+14     	; 0xb68 <__pack_f+0x144>
 b5a:	e7 fe       	sbrs	r14, 7
 b5c:	0d c0       	rjmp	.+26     	; 0xb78 <__pack_f+0x154>
 b5e:	80 e4       	ldi	r24, 0x40	; 64
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	a0 e0       	ldi	r26, 0x00	; 0
 b64:	b0 e0       	ldi	r27, 0x00	; 0
 b66:	04 c0       	rjmp	.+8      	; 0xb70 <__pack_f+0x14c>
 b68:	8f e3       	ldi	r24, 0x3F	; 63
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	a0 e0       	ldi	r26, 0x00	; 0
 b6e:	b0 e0       	ldi	r27, 0x00	; 0
 b70:	e8 0e       	add	r14, r24
 b72:	f9 1e       	adc	r15, r25
 b74:	0a 1f       	adc	r16, r26
 b76:	1b 1f       	adc	r17, r27
 b78:	17 ff       	sbrs	r17, 7
 b7a:	05 c0       	rjmp	.+10     	; 0xb86 <__pack_f+0x162>
 b7c:	16 95       	lsr	r17
 b7e:	07 95       	ror	r16
 b80:	f7 94       	ror	r15
 b82:	e7 94       	ror	r14
 b84:	31 96       	adiw	r30, 0x01	; 1
 b86:	87 e0       	ldi	r24, 0x07	; 7
 b88:	16 95       	lsr	r17
 b8a:	07 95       	ror	r16
 b8c:	f7 94       	ror	r15
 b8e:	e7 94       	ror	r14
 b90:	8a 95       	dec	r24
 b92:	d1 f7       	brne	.-12     	; 0xb88 <__pack_f+0x164>
 b94:	05 c0       	rjmp	.+10     	; 0xba0 <__pack_f+0x17c>
 b96:	ee 24       	eor	r14, r14
 b98:	ff 24       	eor	r15, r15
 b9a:	87 01       	movw	r16, r14
 b9c:	ef ef       	ldi	r30, 0xFF	; 255
 b9e:	f0 e0       	ldi	r31, 0x00	; 0
 ba0:	6e 2f       	mov	r22, r30
 ba2:	67 95       	ror	r22
 ba4:	66 27       	eor	r22, r22
 ba6:	67 95       	ror	r22
 ba8:	90 2f       	mov	r25, r16
 baa:	9f 77       	andi	r25, 0x7F	; 127
 bac:	d7 94       	ror	r13
 bae:	dd 24       	eor	r13, r13
 bb0:	d7 94       	ror	r13
 bb2:	8e 2f       	mov	r24, r30
 bb4:	86 95       	lsr	r24
 bb6:	49 2f       	mov	r20, r25
 bb8:	46 2b       	or	r20, r22
 bba:	58 2f       	mov	r21, r24
 bbc:	5d 29       	or	r21, r13
 bbe:	b7 01       	movw	r22, r14
 bc0:	ca 01       	movw	r24, r20
 bc2:	1f 91       	pop	r17
 bc4:	0f 91       	pop	r16
 bc6:	ff 90       	pop	r15
 bc8:	ef 90       	pop	r14
 bca:	df 90       	pop	r13
 bcc:	08 95       	ret

00000bce <__unpack_f>:
 bce:	fc 01       	movw	r30, r24
 bd0:	db 01       	movw	r26, r22
 bd2:	40 81       	ld	r20, Z
 bd4:	51 81       	ldd	r21, Z+1	; 0x01
 bd6:	22 81       	ldd	r18, Z+2	; 0x02
 bd8:	62 2f       	mov	r22, r18
 bda:	6f 77       	andi	r22, 0x7F	; 127
 bdc:	70 e0       	ldi	r23, 0x00	; 0
 bde:	22 1f       	adc	r18, r18
 be0:	22 27       	eor	r18, r18
 be2:	22 1f       	adc	r18, r18
 be4:	93 81       	ldd	r25, Z+3	; 0x03
 be6:	89 2f       	mov	r24, r25
 be8:	88 0f       	add	r24, r24
 bea:	82 2b       	or	r24, r18
 bec:	28 2f       	mov	r18, r24
 bee:	30 e0       	ldi	r19, 0x00	; 0
 bf0:	99 1f       	adc	r25, r25
 bf2:	99 27       	eor	r25, r25
 bf4:	99 1f       	adc	r25, r25
 bf6:	11 96       	adiw	r26, 0x01	; 1
 bf8:	9c 93       	st	X, r25
 bfa:	11 97       	sbiw	r26, 0x01	; 1
 bfc:	21 15       	cp	r18, r1
 bfe:	31 05       	cpc	r19, r1
 c00:	a9 f5       	brne	.+106    	; 0xc6c <__unpack_f+0x9e>
 c02:	41 15       	cp	r20, r1
 c04:	51 05       	cpc	r21, r1
 c06:	61 05       	cpc	r22, r1
 c08:	71 05       	cpc	r23, r1
 c0a:	11 f4       	brne	.+4      	; 0xc10 <__unpack_f+0x42>
 c0c:	82 e0       	ldi	r24, 0x02	; 2
 c0e:	37 c0       	rjmp	.+110    	; 0xc7e <__unpack_f+0xb0>
 c10:	82 e8       	ldi	r24, 0x82	; 130
 c12:	9f ef       	ldi	r25, 0xFF	; 255
 c14:	13 96       	adiw	r26, 0x03	; 3
 c16:	9c 93       	st	X, r25
 c18:	8e 93       	st	-X, r24
 c1a:	12 97       	sbiw	r26, 0x02	; 2
 c1c:	9a 01       	movw	r18, r20
 c1e:	ab 01       	movw	r20, r22
 c20:	67 e0       	ldi	r22, 0x07	; 7
 c22:	22 0f       	add	r18, r18
 c24:	33 1f       	adc	r19, r19
 c26:	44 1f       	adc	r20, r20
 c28:	55 1f       	adc	r21, r21
 c2a:	6a 95       	dec	r22
 c2c:	d1 f7       	brne	.-12     	; 0xc22 <__unpack_f+0x54>
 c2e:	83 e0       	ldi	r24, 0x03	; 3
 c30:	8c 93       	st	X, r24
 c32:	0d c0       	rjmp	.+26     	; 0xc4e <__unpack_f+0x80>
 c34:	22 0f       	add	r18, r18
 c36:	33 1f       	adc	r19, r19
 c38:	44 1f       	adc	r20, r20
 c3a:	55 1f       	adc	r21, r21
 c3c:	12 96       	adiw	r26, 0x02	; 2
 c3e:	8d 91       	ld	r24, X+
 c40:	9c 91       	ld	r25, X
 c42:	13 97       	sbiw	r26, 0x03	; 3
 c44:	01 97       	sbiw	r24, 0x01	; 1
 c46:	13 96       	adiw	r26, 0x03	; 3
 c48:	9c 93       	st	X, r25
 c4a:	8e 93       	st	-X, r24
 c4c:	12 97       	sbiw	r26, 0x02	; 2
 c4e:	20 30       	cpi	r18, 0x00	; 0
 c50:	80 e0       	ldi	r24, 0x00	; 0
 c52:	38 07       	cpc	r19, r24
 c54:	80 e0       	ldi	r24, 0x00	; 0
 c56:	48 07       	cpc	r20, r24
 c58:	80 e4       	ldi	r24, 0x40	; 64
 c5a:	58 07       	cpc	r21, r24
 c5c:	58 f3       	brcs	.-42     	; 0xc34 <__unpack_f+0x66>
 c5e:	14 96       	adiw	r26, 0x04	; 4
 c60:	2d 93       	st	X+, r18
 c62:	3d 93       	st	X+, r19
 c64:	4d 93       	st	X+, r20
 c66:	5c 93       	st	X, r21
 c68:	17 97       	sbiw	r26, 0x07	; 7
 c6a:	08 95       	ret
 c6c:	2f 3f       	cpi	r18, 0xFF	; 255
 c6e:	31 05       	cpc	r19, r1
 c70:	79 f4       	brne	.+30     	; 0xc90 <__unpack_f+0xc2>
 c72:	41 15       	cp	r20, r1
 c74:	51 05       	cpc	r21, r1
 c76:	61 05       	cpc	r22, r1
 c78:	71 05       	cpc	r23, r1
 c7a:	19 f4       	brne	.+6      	; 0xc82 <__unpack_f+0xb4>
 c7c:	84 e0       	ldi	r24, 0x04	; 4
 c7e:	8c 93       	st	X, r24
 c80:	08 95       	ret
 c82:	64 ff       	sbrs	r22, 4
 c84:	03 c0       	rjmp	.+6      	; 0xc8c <__unpack_f+0xbe>
 c86:	81 e0       	ldi	r24, 0x01	; 1
 c88:	8c 93       	st	X, r24
 c8a:	12 c0       	rjmp	.+36     	; 0xcb0 <__unpack_f+0xe2>
 c8c:	1c 92       	st	X, r1
 c8e:	10 c0       	rjmp	.+32     	; 0xcb0 <__unpack_f+0xe2>
 c90:	2f 57       	subi	r18, 0x7F	; 127
 c92:	30 40       	sbci	r19, 0x00	; 0
 c94:	13 96       	adiw	r26, 0x03	; 3
 c96:	3c 93       	st	X, r19
 c98:	2e 93       	st	-X, r18
 c9a:	12 97       	sbiw	r26, 0x02	; 2
 c9c:	83 e0       	ldi	r24, 0x03	; 3
 c9e:	8c 93       	st	X, r24
 ca0:	87 e0       	ldi	r24, 0x07	; 7
 ca2:	44 0f       	add	r20, r20
 ca4:	55 1f       	adc	r21, r21
 ca6:	66 1f       	adc	r22, r22
 ca8:	77 1f       	adc	r23, r23
 caa:	8a 95       	dec	r24
 cac:	d1 f7       	brne	.-12     	; 0xca2 <__unpack_f+0xd4>
 cae:	70 64       	ori	r23, 0x40	; 64
 cb0:	14 96       	adiw	r26, 0x04	; 4
 cb2:	4d 93       	st	X+, r20
 cb4:	5d 93       	st	X+, r21
 cb6:	6d 93       	st	X+, r22
 cb8:	7c 93       	st	X, r23
 cba:	17 97       	sbiw	r26, 0x07	; 7
 cbc:	08 95       	ret

00000cbe <__fpcmp_parts_f>:
 cbe:	1f 93       	push	r17
 cc0:	dc 01       	movw	r26, r24
 cc2:	fb 01       	movw	r30, r22
 cc4:	9c 91       	ld	r25, X
 cc6:	92 30       	cpi	r25, 0x02	; 2
 cc8:	08 f4       	brcc	.+2      	; 0xccc <__fpcmp_parts_f+0xe>
 cca:	47 c0       	rjmp	.+142    	; 0xd5a <__fpcmp_parts_f+0x9c>
 ccc:	80 81       	ld	r24, Z
 cce:	82 30       	cpi	r24, 0x02	; 2
 cd0:	08 f4       	brcc	.+2      	; 0xcd4 <__fpcmp_parts_f+0x16>
 cd2:	43 c0       	rjmp	.+134    	; 0xd5a <__fpcmp_parts_f+0x9c>
 cd4:	94 30       	cpi	r25, 0x04	; 4
 cd6:	51 f4       	brne	.+20     	; 0xcec <__fpcmp_parts_f+0x2e>
 cd8:	11 96       	adiw	r26, 0x01	; 1
 cda:	1c 91       	ld	r17, X
 cdc:	84 30       	cpi	r24, 0x04	; 4
 cde:	99 f5       	brne	.+102    	; 0xd46 <__fpcmp_parts_f+0x88>
 ce0:	81 81       	ldd	r24, Z+1	; 0x01
 ce2:	68 2f       	mov	r22, r24
 ce4:	70 e0       	ldi	r23, 0x00	; 0
 ce6:	61 1b       	sub	r22, r17
 ce8:	71 09       	sbc	r23, r1
 cea:	3f c0       	rjmp	.+126    	; 0xd6a <__fpcmp_parts_f+0xac>
 cec:	84 30       	cpi	r24, 0x04	; 4
 cee:	21 f0       	breq	.+8      	; 0xcf8 <__fpcmp_parts_f+0x3a>
 cf0:	92 30       	cpi	r25, 0x02	; 2
 cf2:	31 f4       	brne	.+12     	; 0xd00 <__fpcmp_parts_f+0x42>
 cf4:	82 30       	cpi	r24, 0x02	; 2
 cf6:	b9 f1       	breq	.+110    	; 0xd66 <__fpcmp_parts_f+0xa8>
 cf8:	81 81       	ldd	r24, Z+1	; 0x01
 cfa:	88 23       	and	r24, r24
 cfc:	89 f1       	breq	.+98     	; 0xd60 <__fpcmp_parts_f+0xa2>
 cfe:	2d c0       	rjmp	.+90     	; 0xd5a <__fpcmp_parts_f+0x9c>
 d00:	11 96       	adiw	r26, 0x01	; 1
 d02:	1c 91       	ld	r17, X
 d04:	11 97       	sbiw	r26, 0x01	; 1
 d06:	82 30       	cpi	r24, 0x02	; 2
 d08:	f1 f0       	breq	.+60     	; 0xd46 <__fpcmp_parts_f+0x88>
 d0a:	81 81       	ldd	r24, Z+1	; 0x01
 d0c:	18 17       	cp	r17, r24
 d0e:	d9 f4       	brne	.+54     	; 0xd46 <__fpcmp_parts_f+0x88>
 d10:	12 96       	adiw	r26, 0x02	; 2
 d12:	2d 91       	ld	r18, X+
 d14:	3c 91       	ld	r19, X
 d16:	13 97       	sbiw	r26, 0x03	; 3
 d18:	82 81       	ldd	r24, Z+2	; 0x02
 d1a:	93 81       	ldd	r25, Z+3	; 0x03
 d1c:	82 17       	cp	r24, r18
 d1e:	93 07       	cpc	r25, r19
 d20:	94 f0       	brlt	.+36     	; 0xd46 <__fpcmp_parts_f+0x88>
 d22:	28 17       	cp	r18, r24
 d24:	39 07       	cpc	r19, r25
 d26:	bc f0       	brlt	.+46     	; 0xd56 <__fpcmp_parts_f+0x98>
 d28:	14 96       	adiw	r26, 0x04	; 4
 d2a:	8d 91       	ld	r24, X+
 d2c:	9d 91       	ld	r25, X+
 d2e:	0d 90       	ld	r0, X+
 d30:	bc 91       	ld	r27, X
 d32:	a0 2d       	mov	r26, r0
 d34:	24 81       	ldd	r18, Z+4	; 0x04
 d36:	35 81       	ldd	r19, Z+5	; 0x05
 d38:	46 81       	ldd	r20, Z+6	; 0x06
 d3a:	57 81       	ldd	r21, Z+7	; 0x07
 d3c:	28 17       	cp	r18, r24
 d3e:	39 07       	cpc	r19, r25
 d40:	4a 07       	cpc	r20, r26
 d42:	5b 07       	cpc	r21, r27
 d44:	18 f4       	brcc	.+6      	; 0xd4c <__fpcmp_parts_f+0x8e>
 d46:	11 23       	and	r17, r17
 d48:	41 f0       	breq	.+16     	; 0xd5a <__fpcmp_parts_f+0x9c>
 d4a:	0a c0       	rjmp	.+20     	; 0xd60 <__fpcmp_parts_f+0xa2>
 d4c:	82 17       	cp	r24, r18
 d4e:	93 07       	cpc	r25, r19
 d50:	a4 07       	cpc	r26, r20
 d52:	b5 07       	cpc	r27, r21
 d54:	40 f4       	brcc	.+16     	; 0xd66 <__fpcmp_parts_f+0xa8>
 d56:	11 23       	and	r17, r17
 d58:	19 f0       	breq	.+6      	; 0xd60 <__fpcmp_parts_f+0xa2>
 d5a:	61 e0       	ldi	r22, 0x01	; 1
 d5c:	70 e0       	ldi	r23, 0x00	; 0
 d5e:	05 c0       	rjmp	.+10     	; 0xd6a <__fpcmp_parts_f+0xac>
 d60:	6f ef       	ldi	r22, 0xFF	; 255
 d62:	7f ef       	ldi	r23, 0xFF	; 255
 d64:	02 c0       	rjmp	.+4      	; 0xd6a <__fpcmp_parts_f+0xac>
 d66:	60 e0       	ldi	r22, 0x00	; 0
 d68:	70 e0       	ldi	r23, 0x00	; 0
 d6a:	cb 01       	movw	r24, r22
 d6c:	1f 91       	pop	r17
 d6e:	08 95       	ret

00000d70 <__divmodhi4>:
 d70:	97 fb       	bst	r25, 7
 d72:	09 2e       	mov	r0, r25
 d74:	07 26       	eor	r0, r23
 d76:	0a d0       	rcall	.+20     	; 0xd8c <__divmodhi4_neg1>
 d78:	77 fd       	sbrc	r23, 7
 d7a:	04 d0       	rcall	.+8      	; 0xd84 <__divmodhi4_neg2>
 d7c:	0c d0       	rcall	.+24     	; 0xd96 <__udivmodhi4>
 d7e:	06 d0       	rcall	.+12     	; 0xd8c <__divmodhi4_neg1>
 d80:	00 20       	and	r0, r0
 d82:	1a f4       	brpl	.+6      	; 0xd8a <__divmodhi4_exit>

00000d84 <__divmodhi4_neg2>:
 d84:	70 95       	com	r23
 d86:	61 95       	neg	r22
 d88:	7f 4f       	sbci	r23, 0xFF	; 255

00000d8a <__divmodhi4_exit>:
 d8a:	08 95       	ret

00000d8c <__divmodhi4_neg1>:
 d8c:	f6 f7       	brtc	.-4      	; 0xd8a <__divmodhi4_exit>
 d8e:	90 95       	com	r25
 d90:	81 95       	neg	r24
 d92:	9f 4f       	sbci	r25, 0xFF	; 255
 d94:	08 95       	ret

00000d96 <__udivmodhi4>:
 d96:	aa 1b       	sub	r26, r26
 d98:	bb 1b       	sub	r27, r27
 d9a:	51 e1       	ldi	r21, 0x11	; 17
 d9c:	07 c0       	rjmp	.+14     	; 0xdac <__udivmodhi4_ep>

00000d9e <__udivmodhi4_loop>:
 d9e:	aa 1f       	adc	r26, r26
 da0:	bb 1f       	adc	r27, r27
 da2:	a6 17       	cp	r26, r22
 da4:	b7 07       	cpc	r27, r23
 da6:	10 f0       	brcs	.+4      	; 0xdac <__udivmodhi4_ep>
 da8:	a6 1b       	sub	r26, r22
 daa:	b7 0b       	sbc	r27, r23

00000dac <__udivmodhi4_ep>:
 dac:	88 1f       	adc	r24, r24
 dae:	99 1f       	adc	r25, r25
 db0:	5a 95       	dec	r21
 db2:	a9 f7       	brne	.-22     	; 0xd9e <__udivmodhi4_loop>
 db4:	80 95       	com	r24
 db6:	90 95       	com	r25
 db8:	bc 01       	movw	r22, r24
 dba:	cd 01       	movw	r24, r26
 dbc:	08 95       	ret

00000dbe <__prologue_saves__>:
 dbe:	2f 92       	push	r2
 dc0:	3f 92       	push	r3
 dc2:	4f 92       	push	r4
 dc4:	5f 92       	push	r5
 dc6:	6f 92       	push	r6
 dc8:	7f 92       	push	r7
 dca:	8f 92       	push	r8
 dcc:	9f 92       	push	r9
 dce:	af 92       	push	r10
 dd0:	bf 92       	push	r11
 dd2:	cf 92       	push	r12
 dd4:	df 92       	push	r13
 dd6:	ef 92       	push	r14
 dd8:	ff 92       	push	r15
 dda:	0f 93       	push	r16
 ddc:	1f 93       	push	r17
 dde:	cf 93       	push	r28
 de0:	df 93       	push	r29
 de2:	cd b7       	in	r28, 0x3d	; 61
 de4:	de b7       	in	r29, 0x3e	; 62
 de6:	ca 1b       	sub	r28, r26
 de8:	db 0b       	sbc	r29, r27
 dea:	0f b6       	in	r0, 0x3f	; 63
 dec:	f8 94       	cli
 dee:	de bf       	out	0x3e, r29	; 62
 df0:	0f be       	out	0x3f, r0	; 63
 df2:	cd bf       	out	0x3d, r28	; 61
 df4:	09 94       	ijmp

00000df6 <__epilogue_restores__>:
 df6:	2a 88       	ldd	r2, Y+18	; 0x12
 df8:	39 88       	ldd	r3, Y+17	; 0x11
 dfa:	48 88       	ldd	r4, Y+16	; 0x10
 dfc:	5f 84       	ldd	r5, Y+15	; 0x0f
 dfe:	6e 84       	ldd	r6, Y+14	; 0x0e
 e00:	7d 84       	ldd	r7, Y+13	; 0x0d
 e02:	8c 84       	ldd	r8, Y+12	; 0x0c
 e04:	9b 84       	ldd	r9, Y+11	; 0x0b
 e06:	aa 84       	ldd	r10, Y+10	; 0x0a
 e08:	b9 84       	ldd	r11, Y+9	; 0x09
 e0a:	c8 84       	ldd	r12, Y+8	; 0x08
 e0c:	df 80       	ldd	r13, Y+7	; 0x07
 e0e:	ee 80       	ldd	r14, Y+6	; 0x06
 e10:	fd 80       	ldd	r15, Y+5	; 0x05
 e12:	0c 81       	ldd	r16, Y+4	; 0x04
 e14:	1b 81       	ldd	r17, Y+3	; 0x03
 e16:	aa 81       	ldd	r26, Y+2	; 0x02
 e18:	b9 81       	ldd	r27, Y+1	; 0x01
 e1a:	ce 0f       	add	r28, r30
 e1c:	d1 1d       	adc	r29, r1
 e1e:	0f b6       	in	r0, 0x3f	; 63
 e20:	f8 94       	cli
 e22:	de bf       	out	0x3e, r29	; 62
 e24:	0f be       	out	0x3f, r0	; 63
 e26:	cd bf       	out	0x3d, r28	; 61
 e28:	ed 01       	movw	r28, r26
 e2a:	08 95       	ret

00000e2c <_exit>:
 e2c:	f8 94       	cli

00000e2e <__stop_program>:
 e2e:	ff cf       	rjmp	.-2      	; 0xe2e <__stop_program>
